{"version":3,"sources":["meteor://ðŸ’»app/packages/aldeed:collection2/collection2.js","meteor://ðŸ’»app/packages/aldeed:collection2/lib.js"],"names":["_objectSpread","module","link","default","v","EventEmitter","Meteor","Mongo","checkNpmVersions","EJSON","isEmpty","isEqual","isObject","flattenSelector","SimpleSchema","require","Collection2","cleanOptions","filter","autoConvert","removeEmptyStrings","trimStrings","removeNullsFromArrays","Collection","prototype","attachSchema","c2AttachSchema","ss","options","isSimpleSchema","attachTo","obj","_c2","_simpleSchemas","selector","baseSchema","extendSchema","schema","schemaIndex","length","push","replace","undefined","forEach","index","_collection","LocalCollection","defineDeny","keepInsecure","emit","simpleSchema","doc","query","_simpleSchema","schemas","target","i","Object","keys","$set","Error","methodName","_super","_len","arguments","args","Array","_key","bypassCollection2","userId","err","doValidate","isServer","_connection","_makeNewID","splice","apply","collection","type","getAutoValues","isFromTrustedCode","callback","error","isUpsert","last","hasCallback","validatedObjectWasInitiallyEmpty","upsert","isLocalCollection","picks","isArray","pick","omits","omit","validationContext","namedContext","isClient","_debug","reason","stack","wrapCallbackForParsingServerErrors","schemaAllowsId","allowsKey","_id","docId","ObjectID","cachedId","autoValueContext","isInsert","isUpdate","extendAutoValueContext","_cleanOptions","cleanOptionsForThisOperation","prop","clean","mutate","isModifier","docToValidate","hasOwnProperty","call","set","assign","isValid","validate","modifier","extendedCustomContext","wrapCallbackForParsingMongoValidationErrors","_Meteor$settings","_Meteor$settings$pack","_Meteor$settings$pack2","getErrorObject","settings","packages","collection2","disableCollectionNamesInValidation","concat","_name","context","appendToMessage","message","invalidKeys","validationErrors","firstErrorKey","name","firstErrorMessage","keyErrorMessage","indexOf","trim","sanitizedError","stringify","addUniqueError","errorMessage","split","val","addValidationErrorsPropName","addValidationErrors","value","cb","wrappedCallbackForParsingMongoValidationErrors","_len2","_key2","code","wrappedCallbackForParsingServerErrors","_len3","_key3","details","invalidKeysFromServer","parse","alreadyInsecure","c","Package","insecure","allow","insert","update","remove","fetch","transform","alreadyDefined","deny","fields","s1","s2","version","extend","exportDefault","export","$and","sel","entries","_ref","key","startsWith","$eq","$in","every"],"mappings":"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","file":"/packages/aldeed_collection2.js","sourcesContent":["import { EventEmitter } from 'meteor/raix:eventemitter';\nimport { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { checkNpmVersions } from 'meteor/tmeasday:check-npm-versions';\nimport { EJSON } from 'meteor/ejson';\nimport isEmpty from 'lodash.isempty';\nimport isEqual from 'lodash.isequal';\nimport isObject from 'lodash.isobject';\nimport { flattenSelector } from './lib';\n\ncheckNpmVersions({ 'simpl-schema': '>=0.0.0' }, 'aldeed:collection2');\n\nconst SimpleSchema = require('simpl-schema').default;\n\n// Exported only for listening to events\nconst Collection2 = new EventEmitter();\n\nCollection2.cleanOptions = {\n  filter: true,\n  autoConvert: true,\n  removeEmptyStrings: true,\n  trimStrings: true,\n  removeNullsFromArrays: false,\n};\n\n/**\n * Mongo.Collection.prototype.attachSchema\n * @param {SimpleSchema|Object} ss - SimpleSchema instance or a schema definition object\n *    from which to create a new SimpleSchema instance\n * @param {Object} [options]\n * @param {Boolean} [options.transform=false] Set to `true` if your document must be passed\n *    through the collection's transform to properly validate.\n * @param {Boolean} [options.replace=false] Set to `true` to replace any existing schema instead of combining\n * @return {undefined}\n *\n * Use this method to attach a schema to a collection created by another package,\n * such as Meteor.users. It is most likely unsafe to call this method more than\n * once for a single collection, or to call this for a collection that had a\n * schema object passed to its constructor.\n */\nMongo.Collection.prototype.attachSchema = function c2AttachSchema(ss, options) {\n  options = options || {};\n\n  // Allow passing just the schema object\n  if (!SimpleSchema.isSimpleSchema(ss)) {\n    ss = new SimpleSchema(ss);\n  }\n\n  function attachTo(obj) {\n    // we need an array to hold multiple schemas\n    // position 0 is reserved for the \"base\" schema\n    obj._c2 = obj._c2 || {};\n    obj._c2._simpleSchemas = obj._c2._simpleSchemas || [ null ];\n\n    if (typeof options.selector === \"object\") {\n      // Selector Schemas\n\n      // Extend selector schema with base schema\n      const baseSchema = obj._c2._simpleSchemas[0];\n      if (baseSchema) {\n        ss = extendSchema(baseSchema.schema, ss);\n      }\n\n      // Index of existing schema with identical selector\n      let schemaIndex;\n\n      // Loop through existing schemas with selectors,\n      for (schemaIndex = obj._c2._simpleSchemas.length - 1; 0 < schemaIndex; schemaIndex--) {\n        const schema = obj._c2._simpleSchemas[schemaIndex];\n        if (schema && isEqual(schema.selector, options.selector)) break;\n      }\n\n      if (schemaIndex <= 0) {\n        // We didn't find the schema in our array - push it into the array\n        obj._c2._simpleSchemas.push({\n          schema: ss,\n          selector: options.selector,\n        });\n      } else {\n        // We found a schema with an identical selector in our array,\n        if (options.replace === true) {\n          // Replace existing selector schema with new selector schema\n          obj._c2._simpleSchemas[schemaIndex].schema = ss;\n        } else {\n          // Extend existing selector schema with new selector schema.\n          obj._c2._simpleSchemas[schemaIndex].schema = extendSchema(obj._c2._simpleSchemas[schemaIndex].schema, ss);\n        }\n      }\n    } else {\n      // Base Schema\n      if (options.replace === true) {\n        // Replace base schema and delete all other schemas\n        obj._c2._simpleSchemas = [{\n          schema: ss,\n          selector: options.selector,\n        }];\n      } else {\n        // Set base schema if not yet set\n        if (!obj._c2._simpleSchemas[0]) {\n          return obj._c2._simpleSchemas[0] = { schema: ss, selector: undefined };\n        }\n        // Extend base schema and therefore extend all schemas\n        obj._c2._simpleSchemas.forEach((schema, index) => {\n          if (obj._c2._simpleSchemas[index]) {\n            obj._c2._simpleSchemas[index].schema = extendSchema(obj._c2._simpleSchemas[index].schema, ss);\n          }\n        });\n      }\n    }\n  }\n\n  attachTo(this);\n  // Attach the schema to the underlying LocalCollection, too\n  if (this._collection instanceof LocalCollection) {\n    this._collection._c2 = this._collection._c2 || {};\n    attachTo(this._collection);\n  }\n\n  defineDeny(this, options);\n  keepInsecure(this);\n\n  Collection2.emit('schema.attached', this, ss, options);\n};\n\n[Mongo.Collection, LocalCollection].forEach((obj) => {\n  /**\n   * simpleSchema\n   * @description function detect the correct schema by given params. If it\n   * detect multi-schema presence in the collection, then it made an attempt to find a\n   * `selector` in args\n   * @param {Object} doc - It could be <update> on update/upsert or document\n   * itself on insert/remove\n   * @param {Object} [options] - It could be <update> on update/upsert etc\n   * @param {Object} [query] - it could be <query> on update/upsert\n   * @return {Object} Schema\n   */\n  obj.prototype.simpleSchema = function (doc, options, query) {\n    if (!this._c2) return null;\n    if (this._c2._simpleSchema) return this._c2._simpleSchema;\n\n    const schemas = this._c2._simpleSchemas;\n    if (schemas && schemas.length > 0) {\n\n      let schema, selector, target;\n      // Position 0 reserved for base schema\n      for (var i = 1; i < schemas.length; i++) {\n        schema = schemas[i];\n        selector = Object.keys(schema.selector)[0];\n\n        // We will set this to undefined because in theory you might want to select\n        // on a null value.\n        target = undefined;\n        // here we are looking for selector in different places\n        // $set should have more priority here\n        if (doc.$set && typeof doc.$set[selector] !== 'undefined') {\n          target = doc.$set[selector];\n        } else if (typeof doc[selector] !== 'undefined') {\n          target = doc[selector];\n        } else if (options && options.selector) {\n          target = options.selector[selector];\n        } else if (query && query[selector]) { // on upsert/update operations\n          target = query[selector];\n        }\n\n        // we need to compare given selector with doc property or option to\n        // find right schema\n        if (target !== undefined && target === schema.selector[selector]) {\n          return schema.schema;\n        }\n      }\n      if (schemas[0]) {\n        return schemas[0].schema;\n      } else {\n        throw new Error(\"No default schema\");\n      }\n    }\n\n    return null;\n  };\n});\n\n// Wrap DB write operation methods\n['insert', 'update'].forEach((methodName) => {\n  const _super = Mongo.Collection.prototype[methodName];\n  Mongo.Collection.prototype[methodName] = function(...args) {\n    let options = (methodName === \"insert\") ? args[1] : args[2];\n\n    // Support missing options arg\n    if (!options || typeof options === \"function\") {\n      options = {};\n    }\n\n    if (this._c2 && options.bypassCollection2 !== true) {\n      let userId = null;\n      try { // https://github.com/aldeed/meteor-collection2/issues/175\n        userId = Meteor.userId();\n      } catch (err) {}\n\n      args = doValidate(\n        this,\n        methodName,\n        args,\n        Meteor.isServer || this._connection === null, // getAutoValues\n        userId,\n        Meteor.isServer // isFromTrustedCode\n      );\n      if (!args) {\n        // doValidate already called the callback or threw the error so we're done.\n        // But insert should always return an ID to match core behavior.\n        return methodName === \"insert\" ? this._makeNewID() : undefined;\n      }\n    } else {\n      // We still need to adjust args because insert does not take options\n      if (methodName === \"insert\" && typeof args[1] !== 'function') args.splice(1, 1);\n    }\n\n    return _super.apply(this, args);\n  };\n});\n\n/*\n * Private\n */\n\nfunction doValidate(collection, type, args, getAutoValues, userId, isFromTrustedCode) {\n  let doc, callback, error, options, isUpsert, selector, last, hasCallback;\n\n  if (!args.length) {\n    throw new Error(type + \" requires an argument\");\n  }\n\n  // Gather arguments and cache the selector\n  if (type === \"insert\") {\n    doc = args[0];\n    options = args[1];\n    callback = args[2];\n\n    // The real insert doesn't take options\n    if (typeof options === \"function\") {\n      args = [doc, options];\n    } else if (typeof callback === \"function\") {\n      args = [doc, callback];\n    } else {\n      args = [doc];\n    }\n  } else if (type === \"update\") {\n    selector = args[0];\n    doc = args[1];\n    options = args[2];\n    callback = args[3];\n  } else {\n    throw new Error(\"invalid type argument\");\n  }\n\n  const validatedObjectWasInitiallyEmpty = isEmpty(doc);\n\n  // Support missing options arg\n  if (!callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n\n  last = args.length - 1;\n\n  hasCallback = (typeof args[last] === 'function');\n\n  // If update was called with upsert:true, flag as an upsert\n  isUpsert = (type === \"update\" && options.upsert === true);\n\n  // we need to pass `doc` and `options` to `simpleSchema` method, that's why\n  // schema declaration moved here\n  let schema = collection.simpleSchema(doc, options, selector);\n  const isLocalCollection = (collection._connection === null);\n\n  // On the server and for local collections, we allow passing `getAutoValues: false` to disable autoValue functions\n  if ((Meteor.isServer || isLocalCollection) && options.getAutoValues === false) {\n    getAutoValues = false;\n  }\n\n  // Process pick/omit options if they are present\n  const picks = Array.isArray(options.pick) ? options.pick : null;\n  const omits = Array.isArray(options.omit) ? options.omit : null;\n\n  if (picks && omits) {\n    // Pick and omit cannot both be present in the options\n    throw new Error('pick and omit options are mutually exclusive');\n  } else if (picks) {\n    schema = schema.pick(...picks);\n  } else if (omits) {\n    schema = schema.omit(...omits);\n  }\n\n  // Determine validation context\n  let validationContext = options.validationContext;\n  if (validationContext) {\n    if (typeof validationContext === 'string') {\n      validationContext = schema.namedContext(validationContext);\n    }\n  } else {\n    validationContext = schema.namedContext();\n  }\n\n  // Add a default callback function if we're on the client and no callback was given\n  if (Meteor.isClient && !callback) {\n    // Client can't block, so it can't report errors by exception,\n    // only by callback. If they forget the callback, give them a\n    // default one that logs the error, so they aren't totally\n    // baffled if their writes don't work because their database is\n    // down.\n    callback = function(err) {\n      if (err) {\n        Meteor._debug(type + \" failed: \" + (err.reason || err.stack));\n      }\n    };\n  }\n\n  // If client validation is fine or is skipped but then something\n  // is found to be invalid on the server, we get that error back\n  // as a special Meteor.Error that we need to parse.\n  if (Meteor.isClient && hasCallback) {\n    callback = args[last] = wrapCallbackForParsingServerErrors(validationContext, callback);\n  }\n\n  const schemaAllowsId = schema.allowsKey(\"_id\");\n  if (type === \"insert\" && !doc._id && schemaAllowsId) {\n    doc._id = collection._makeNewID();\n  }\n\n  // Get the docId for passing in the autoValue/custom context\n  let docId;\n  if (type === 'insert') {\n    docId = doc._id; // might be undefined\n  } else if (type === \"update\" && selector) {\n    docId = typeof selector === 'string' || selector instanceof Mongo.ObjectID ? selector : selector._id;\n  }\n\n  // If _id has already been added, remove it temporarily if it's\n  // not explicitly defined in the schema.\n  let cachedId;\n  if (doc._id && !schemaAllowsId) {\n    cachedId = doc._id;\n    delete doc._id;\n  }\n\n  const autoValueContext = {\n    isInsert: (type === \"insert\"),\n    isUpdate: (type === \"update\" && options.upsert !== true),\n    isUpsert,\n    userId,\n    isFromTrustedCode,\n    docId,\n    isLocalCollection\n  };\n\n  const extendAutoValueContext = {\n    ...((schema._cleanOptions || {}).extendAutoValueContext || {}),\n    ...autoValueContext,\n    ...options.extendAutoValueContext,\n  };\n\n  const cleanOptionsForThisOperation = {};\n  [\"autoConvert\", \"filter\", \"removeEmptyStrings\", \"removeNullsFromArrays\", \"trimStrings\"].forEach(prop => {\n    if (typeof options[prop] === \"boolean\") {\n      cleanOptionsForThisOperation[prop] = options[prop];\n    }\n  });\n\n  // Preliminary cleaning on both client and server. On the server and for local\n  // collections, automatic values will also be set at this point.\n  schema.clean(doc, {\n    mutate: true, // Clean the doc/modifier in place\n    isModifier: (type !== \"insert\"),\n    // Start with some Collection2 defaults, which will usually be overwritten\n    ...Collection2.cleanOptions,\n    // The extend with the schema-level defaults (from SimpleSchema constructor options)\n    ...(schema._cleanOptions || {}),\n    // Finally, options for this specific operation should take precedence\n    ...cleanOptionsForThisOperation,\n    extendAutoValueContext, // This was extended separately above\n    getAutoValues, // Force this override\n  });\n\n  // We clone before validating because in some cases we need to adjust the\n  // object a bit before validating it. If we adjusted `doc` itself, our\n  // changes would persist into the database.\n  let docToValidate = {};\n  for (var prop in doc) {\n    // We omit prototype properties when cloning because they will not be valid\n    // and mongo omits them when saving to the database anyway.\n    if (Object.prototype.hasOwnProperty.call(doc, prop)) {\n      docToValidate[prop] = doc[prop];\n    }\n  }\n\n  // On the server, upserts are possible; SimpleSchema handles upserts pretty\n  // well by default, but it will not know about the fields in the selector,\n  // which are also stored in the database if an insert is performed. So we\n  // will allow these fields to be considered for validation by adding them\n  // to the $set in the modifier, while stripping out query selectors as these\n  // don't make it into the upserted document and break validation.\n  // This is no doubt prone to errors, but there probably isn't any better way\n  // right now.\n  if (Meteor.isServer && isUpsert && isObject(selector)) {\n    const set = docToValidate.$set || {};\n    docToValidate.$set = flattenSelector(selector);\n\n    if (!schemaAllowsId) delete docToValidate.$set._id;\n    Object.assign(docToValidate.$set, set);\n  }\n  // Set automatic values for validation on the client.\n  // On the server, we already updated doc with auto values, but on the client,\n  // we will add them to docToValidate for validation purposes only.\n  // This is because we want all actual values generated on the server.\n  if (Meteor.isClient && !isLocalCollection) {\n    schema.clean(docToValidate, {\n      autoConvert: false,\n      extendAutoValueContext,\n      filter: false,\n      getAutoValues: true,\n      isModifier: (type !== \"insert\"),\n      mutate: true, // Clean the doc/modifier in place\n      removeEmptyStrings: false,\n      removeNullsFromArrays: false,\n      trimStrings: false,\n    });\n  }\n\n  // XXX Maybe move this into SimpleSchema\n  if (!validatedObjectWasInitiallyEmpty && isEmpty(docToValidate)) {\n    throw new Error('After filtering out keys not in the schema, your ' +\n      (type === 'update' ? 'modifier' : 'object') +\n      ' is now empty');\n  }\n\n  // Validate doc\n  let isValid;\n  if (options.validate === false) {\n    isValid = true;\n  } else {\n    isValid = validationContext.validate(docToValidate, {\n      modifier: (type === \"update\" || type === \"upsert\"),\n      upsert: isUpsert,\n      extendedCustomContext: {\n        isInsert: (type === \"insert\"),\n        isUpdate: (type === \"update\" && options.upsert !== true),\n        isUpsert,\n        userId,\n        isFromTrustedCode,\n        docId,\n        isLocalCollection,\n        ...(options.extendedCustomContext || {}),\n      },\n    });\n  }\n\n  if (isValid) {\n    // Add the ID back\n    if (cachedId) {\n      doc._id = cachedId;\n    }\n\n    // Update the args to reflect the cleaned doc\n    // XXX not sure this is necessary since we mutate\n    if (type === \"insert\") {\n      args[0] = doc;\n    } else {\n      args[1] = doc;\n    }\n\n    // If callback, set invalidKey when we get a mongo unique error\n    if (Meteor.isServer && hasCallback) {\n      args[last] = wrapCallbackForParsingMongoValidationErrors(validationContext, args[last]);\n    }\n\n    return args;\n  } else {\n    error = getErrorObject(validationContext, Meteor.settings?.packages?.collection2?.disableCollectionNamesInValidation ? '' : `in ${collection._name} ${type}`);\n    if (callback) {\n      // insert/update/upsert pass `false` when there's an error, so we do that\n      callback(error, false);\n    } else {\n      throw error;\n    }\n  }\n}\n\nfunction getErrorObject(context, appendToMessage = '') {\n  let message;\n  const invalidKeys = (typeof context.validationErrors === 'function') ? context.validationErrors() : context.invalidKeys();\n  if (invalidKeys.length) {\n    const firstErrorKey = invalidKeys[0].name;\n    const firstErrorMessage = context.keyErrorMessage(firstErrorKey);\n\n    // If the error is in a nested key, add the full key to the error message\n    // to be more helpful.\n    if (firstErrorKey.indexOf('.') === -1) {\n      message = firstErrorMessage;\n    } else {\n      message = `${firstErrorMessage} (${firstErrorKey})`;\n    }\n  } else {\n    message = \"Failed validation\";\n  }\n  message = `${message} ${appendToMessage}`.trim();\n  const error = new Error(message);\n  error.invalidKeys = invalidKeys;\n  error.validationContext = context;\n  // If on the server, we add a sanitized error, too, in case we're\n  // called from a method.\n  if (Meteor.isServer) {\n    error.sanitizedError = new Meteor.Error(400, message, EJSON.stringify(error.invalidKeys));\n  }\n  return error;\n}\n\nfunction addUniqueError(context, errorMessage) {\n  const name = errorMessage.split('c2_')[1].split(' ')[0];\n  const val = errorMessage.split('dup key:')[1].split('\"')[1];\n\n  const addValidationErrorsPropName = (typeof context.addValidationErrors === 'function') ? 'addValidationErrors' : 'addInvalidKeys';\n  context[addValidationErrorsPropName]([{\n    name: name,\n    type: 'notUnique',\n    value: val\n  }]);\n}\n\nfunction wrapCallbackForParsingMongoValidationErrors(validationContext, cb) {\n  return function wrappedCallbackForParsingMongoValidationErrors(...args) {\n    const error = args[0];\n    if (error &&\n        ((error.name === \"MongoError\" && error.code === 11001) || error.message.indexOf('MongoError: E11000') !== -1) &&\n        error.message.indexOf('c2_') !== -1) {\n      addUniqueError(validationContext, error.message);\n      args[0] = getErrorObject(validationContext);\n    }\n    return cb.apply(this, args);\n  };\n}\n\nfunction wrapCallbackForParsingServerErrors(validationContext, cb) {\n  const addValidationErrorsPropName = (typeof validationContext.addValidationErrors === 'function') ? 'addValidationErrors' : 'addInvalidKeys';\n  return function wrappedCallbackForParsingServerErrors(...args) {\n    const error = args[0];\n    // Handle our own validation errors\n    if (error instanceof Meteor.Error &&\n        error.error === 400 &&\n        error.reason === \"INVALID\" &&\n        typeof error.details === \"string\") {\n      const invalidKeysFromServer = EJSON.parse(error.details);\n      validationContext[addValidationErrorsPropName](invalidKeysFromServer);\n      args[0] = getErrorObject(validationContext);\n    }\n    // Handle Mongo unique index errors, which are forwarded to the client as 409 errors\n    else if (error instanceof Meteor.Error &&\n             error.error === 409 &&\n             error.reason &&\n             error.reason.indexOf('E11000') !== -1 &&\n             error.reason.indexOf('c2_') !== -1) {\n      addUniqueError(validationContext, error.reason);\n      args[0] = getErrorObject(validationContext);\n    }\n    return cb.apply(this, args);\n  };\n}\n\nlet alreadyInsecure = {};\nfunction keepInsecure(c) {\n  // If insecure package is in use, we need to add allow rules that return\n  // true. Otherwise, it would seemingly turn off insecure mode.\n  if (Package && Package.insecure && !alreadyInsecure[c._name]) {\n    c.allow({\n      insert: function() {\n        return true;\n      },\n      update: function() {\n        return true;\n      },\n      remove: function () {\n        return true;\n      },\n      fetch: [],\n      transform: null\n    });\n    alreadyInsecure[c._name] = true;\n  }\n  // If insecure package is NOT in use, then adding the two deny functions\n  // does not have any effect on the main app's security paradigm. The\n  // user will still be required to add at least one allow function of her\n  // own for each operation for this collection. And the user may still add\n  // additional deny functions, but does not have to.\n}\n\nlet alreadyDefined = {};\nfunction defineDeny(c, options) {\n  if (!alreadyDefined[c._name]) {\n\n    const isLocalCollection = (c._connection === null);\n\n    // First define deny functions to extend doc with the results of clean\n    // and auto-values. This must be done with \"transform: null\" or we would be\n    // extending a clone of doc and therefore have no effect.\n    c.deny({\n      insert: function(userId, doc) {\n        // Referenced doc is cleaned in place\n        c.simpleSchema(doc).clean(doc, {\n          mutate: true,\n          isModifier: false,\n          // We don't do these here because they are done on the client if desired\n          filter: false,\n          autoConvert: false,\n          removeEmptyStrings: false,\n          trimStrings: false,\n          extendAutoValueContext: {\n            isInsert: true,\n            isUpdate: false,\n            isUpsert: false,\n            userId: userId,\n            isFromTrustedCode: false,\n            docId: doc._id,\n            isLocalCollection: isLocalCollection\n          }\n        });\n\n        return false;\n      },\n      update: function(userId, doc, fields, modifier) {\n        // Referenced modifier is cleaned in place\n        c.simpleSchema(modifier).clean(modifier, {\n          mutate: true,\n          isModifier: true,\n          // We don't do these here because they are done on the client if desired\n          filter: false,\n          autoConvert: false,\n          removeEmptyStrings: false,\n          trimStrings: false,\n          extendAutoValueContext: {\n            isInsert: false,\n            isUpdate: true,\n            isUpsert: false,\n            userId: userId,\n            isFromTrustedCode: false,\n            docId: doc && doc._id,\n            isLocalCollection: isLocalCollection\n          }\n        });\n\n        return false;\n      },\n      fetch: ['_id'],\n      transform: null\n    });\n\n    // Second define deny functions to validate again on the server\n    // for client-initiated inserts and updates. These should be\n    // called after the clean/auto-value functions since we're adding\n    // them after. These must *not* have \"transform: null\" if options.transform is true because\n    // we need to pass the doc through any transforms to be sure\n    // that custom types are properly recognized for type validation.\n    c.deny({\n      insert: function(userId, doc) {\n        // We pass the false options because we will have done them on client if desired\n        doValidate(\n          c,\n          \"insert\",\n          [\n            doc,\n            {\n              trimStrings: false,\n              removeEmptyStrings: false,\n              filter: false,\n              autoConvert: false\n            },\n            function(error) {\n              if (error) {\n                throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));\n              }\n            }\n          ],\n          false, // getAutoValues\n          userId,\n          false // isFromTrustedCode\n        );\n\n        return false;\n      },\n      update: function(userId, doc, fields, modifier) {\n        // NOTE: This will never be an upsert because client-side upserts\n        // are not allowed once you define allow/deny functions.\n        // We pass the false options because we will have done them on client if desired\n        doValidate(\n          c,\n          \"update\",\n          [\n            {_id: doc && doc._id},\n            modifier,\n            {\n              trimStrings: false,\n              removeEmptyStrings: false,\n              filter: false,\n              autoConvert: false\n            },\n            function(error) {\n              if (error) {\n                throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));\n              }\n            }\n          ],\n          false, // getAutoValues\n          userId,\n          false // isFromTrustedCode\n        );\n\n        return false;\n      },\n      fetch: ['_id'],\n      ...(options.transform === true ? {} : {transform: null}),\n    });\n\n    // note that we've already done this collection so that we don't do it again\n    // if attachSchema is called again\n    alreadyDefined[c._name] = true;\n  }\n}\n\nfunction extendSchema(s1, s2) {\n  if (s2.version >= 2) {\n    const ss = new SimpleSchema(s1);\n    ss.extend(s2);\n    return ss;\n  } else {\n    return new SimpleSchema([ s1, s2 ]);\n  }\n}\n\nexport default Collection2;\n","export function flattenSelector(selector) {\n  // If selector uses $and format, convert to plain object selector\n  if (Array.isArray(selector.$and)) {\n    selector.$and.forEach(sel => {\n      Object.assign(selector, flattenSelector(sel));\n    });\n\n    delete selector.$and\n  }\n\n  const obj = {}\n\n  Object.entries(selector).forEach(([key, value]) => {\n    // Ignoring logical selectors (https://docs.mongodb.com/manual/reference/operator/query/#logical)\n    if (!key.startsWith(\"$\")) {\n      if (typeof value === 'object' && value !== null) {\n        if (value.$eq !== undefined) {\n          obj[key] = value.$eq\n        } else if (Array.isArray(value.$in) && value.$in.length === 1) {\n          obj[key] = value.$in[0]\n        } else if (Object.keys(value).every(v => !(typeof v === \"string\" && v.startsWith(\"$\")))) {\n          obj[key] = value\n        }\n      } else {\n        obj[key] = value\n      }\n    }\n  })\n  \n  return obj\n}\n"]}