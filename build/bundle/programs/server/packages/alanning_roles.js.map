{"version":3,"sources":["meteor://ðŸ’»app/packages/alanning:roles/roles/roles_common.js","meteor://ðŸ’»app/packages/alanning:roles/roles/roles_common_async.js","meteor://ðŸ’»app/packages/alanning:roles/roles/roles_server.js"],"names":["Meteor","roles","Mongo","Collection","roleAssignment","Roles","getGroupsForUserDeprecationWarning","Object","assign","GLOBAL_GROUP","createRole","roleName","options","_checkRoleName","unlessExists","result","upsert","_id","$setOnInsert","children","insertedId","Error","deleteRole","inheritedRoles","remove","_getParentRoleNames","findOne","find","$in","fetch","forEach","r","update","$pull","_getInheritedRoleNames","$set","map","r2","multi","length","renameRole","oldName","newName","count","role","insert","addRolesToParent","rolesNames","parentName","Array","isArray","_addRoleToParent","includes","$ne","$push","$each","removeRolesFromParent","_removeRoleFromParent","fields","addUsersToRoles","users","id","_normalizeOptions","_checkScopeName","scope","ifExists","user","_addUserToRole","setUserRoles","anyScope","selector","userId","res","parentRoles","Set","parentRole","add","delete","nestedRoles","removeUsersFromRoles","_removeUserFromRole","userIsInRole","filter","some","limit","getRolesForUser","fullObjects","onlyAssigned","onlyScoped","push","reduce","rev","current","concat","getAllRoles","queryOptions","sort","getUsersInRole","ids","getUserAssignmentsForRole","a","_getUsersInRoleCursor","getGroupsForUser","console","warn","getScopesForUser","arguments","scopes","obi","renameScope","removeScope","name","trim","isParentOf","parentRoleName","childRoleName","rolesToCheck","pop","undefined","_normalizeScopeName","scopeName","call","module","module1","link","v","asyncSome","arr","predicate","Promise","asyncApply","e","await","createRoleAsync","existingRole","findOneAsync","updateAsync","insertAsync","deleteRoleAsync","removeAsync","fetchAsync","_getInheritedRoleNamesAsync","renameRoleAsync","addRolesToParentAsync","_addRoleToParentAsync","removeRolesFromParentAsync","_removeRoleFromParentAsync","_getParentRoleNamesAsync","addUsersToRolesAsync","_addUserToRoleAsync","setUserRolesAsync","existingAssignment","removeUsersFromRolesAsync","_removeUserFromRoleAsync","userIsInRoleAsync","out","countAsync","getRolesForUserAsync","getUsersInRoleAsync","getGroupsForUserAsync","getScopesForUserAsync","renameScopeAsync","removeScopeAsync","isParentOfAsync","indexFnAssignment","indexFnRoles","createIndexAsync","bind","createIndex","_ensureIndex","index","publish","loggedInUserId","ready","_isNewRole","_isOldRole","_isNewField","_isOldField","_convertToNewRole","oldRole","_convertToOldRole","newRole","_convertToNewField","oldRoles","convertUnderscoresToDots","assigned","entries","_ref","group","rolesArray","replace","_convertToOldField","newRoles","usingGroups","userRole","__global_roles__","_defaultUpdateUser","_defaultUpdateRole","_dropCollectionIndex","collection","indexName","_dropIndex","indexNotFound","test","message","err","errmsg","_forwardMigrate","updateUser","updateRole","cursor","_forwardMigrate2","userSelector","$unset","_backwardMigrate","_backwardMigrate2","assignmentSelector","currentRole","inheritedRole","currentInheritedRole"],"mappings":"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","file":"/packages/alanning_roles.js","sourcesContent":["/* global Meteor, Roles, Mongo */\n\n/**\n * Provides functions related to user authorization. Compatible with built-in Meteor accounts packages.\n *\n * Roles are accessible throgh `Meteor.roles` collection and documents consist of:\n *  - `_id`: role name\n *  - `children`: list of subdocuments:\n *    - `_id`\n *\n * Children list elements are subdocuments so that they can be easier extended in the future or by plugins.\n *\n * Roles can have multiple parents and can be children (subroles) of multiple roles.\n *\n * Example: `{_id: 'admin', children: [{_id: 'editor'}]}`\n *\n * The assignment of a role to a user is stored in a collection, accessible through `Meteor.roleAssignment`.\n * It's documents consist of\n *  - `_id`: Internal MongoDB id\n *  - `role`: A role object which got assigned. Usually only contains the `_id` property\n *  - `user`: A user object, usually only contains the `_id` property\n *  - `scope`: scope name\n *  - `inheritedRoles`: A list of all the roles objects inherited by the assigned role.\n *\n * @module Roles\n */\nif (!Meteor.roles) {\n  Meteor.roles = new Mongo.Collection('roles')\n}\n\nif (!Meteor.roleAssignment) {\n  Meteor.roleAssignment = new Mongo.Collection('role-assignment')\n}\n\n/**\n * @class Roles\n */\nif (typeof Roles === 'undefined') {\n  Roles = {} // eslint-disable-line no-global-assign\n}\n\nlet getGroupsForUserDeprecationWarning = false\n\nObject.assign(Roles, {\n\n  /**\n   * Used as a global group (now scope) name. Not used anymore.\n   *\n   * @property GLOBAL_GROUP\n   * @static\n   * @deprecated\n   */\n  GLOBAL_GROUP: null,\n\n  /**\n   * Create a new role.\n   *\n   * @method createRole\n   * @param {String} roleName Name of role.\n   * @param {Object} [options] Options:\n   *   - `unlessExists`: if `true`, exception will not be thrown in the role already exists\n   * @return {String} ID of the new role or null.\n   * @static\n   */\n  createRole: function (roleName, options) {\n    Roles._checkRoleName(roleName)\n\n    options = Object.assign({\n      unlessExists: false\n    }, options)\n\n    const result = Meteor.roles.upsert({ _id: roleName }, { $setOnInsert: { children: [] } })\n\n    if (!result.insertedId) {\n      if (options.unlessExists) return null\n      throw new Error('Role \\'' + roleName + '\\' already exists.')\n    }\n\n    return result.insertedId\n  },\n\n  /**\n   * Delete an existing role.\n   *\n   * If the role is set for any user, it is automatically unset.\n   *\n   * @method deleteRole\n   * @param {String} roleName Name of role.\n   * @static\n   */\n  deleteRole: function (roleName) {\n    let roles\n    let inheritedRoles\n\n    Roles._checkRoleName(roleName)\n\n    // Remove all assignments\n    Meteor.roleAssignment.remove({\n      'role._id': roleName\n    })\n\n    do {\n      // For all roles who have it as a dependency ...\n      roles = Roles._getParentRoleNames(Meteor.roles.findOne({ _id: roleName }))\n\n      Meteor.roles.find({ _id: { $in: roles } }).fetch().forEach(r => {\n        Meteor.roles.update({\n          _id: r._id\n        }, {\n          $pull: {\n            children: {\n              _id: roleName\n            }\n          }\n        })\n\n        inheritedRoles = Roles._getInheritedRoleNames(Meteor.roles.findOne({ _id: r._id }))\n        Meteor.roleAssignment.update({\n          'role._id': r._id\n        }, {\n          $set: {\n            inheritedRoles: [r._id, ...inheritedRoles].map(r2 => ({ _id: r2 }))\n          }\n        }, { multi: true })\n      })\n    } while (roles.length > 0)\n\n    // And finally remove the role itself\n    Meteor.roles.remove({ _id: roleName })\n  },\n\n  /**\n   * Rename an existing role.\n   *\n   * @method renameRole\n   * @param {String} oldName Old name of a role.\n   * @param {String} newName New name of a role.\n   * @static\n   */\n  renameRole: function (oldName, newName) {\n    let count\n\n    Roles._checkRoleName(oldName)\n    Roles._checkRoleName(newName)\n\n    if (oldName === newName) return\n\n    const role = Meteor.roles.findOne({ _id: oldName })\n\n    if (!role) {\n      throw new Error('Role \\'' + oldName + '\\' does not exist.')\n    }\n\n    role._id = newName\n\n    Meteor.roles.insert(role)\n\n    do {\n      count = Meteor.roleAssignment.update({\n        'role._id': oldName\n      }, {\n        $set: {\n          'role._id': newName\n        }\n      }, { multi: true })\n    } while (count > 0)\n\n    do {\n      count = Meteor.roleAssignment.update({\n        'inheritedRoles._id': oldName\n      }, {\n        $set: {\n          'inheritedRoles.$._id': newName\n        }\n      }, { multi: true })\n    } while (count > 0)\n\n    do {\n      count = Meteor.roles.update({\n        'children._id': oldName\n      }, {\n        $set: {\n          'children.$._id': newName\n        }\n      }, { multi: true })\n    } while (count > 0)\n\n    Meteor.roles.remove({ _id: oldName })\n  },\n\n  /**\n   * Add role parent to roles.\n   *\n   * Previous parents are kept (role can have multiple parents). For users which have the\n   * parent role set, new subroles are added automatically.\n   *\n   * @method addRolesToParent\n   * @param {Array|String} rolesNames Name(s) of role(s).\n   * @param {String} parentName Name of parent role.\n   * @static\n   */\n  addRolesToParent: function (rolesNames, parentName) {\n    // ensure arrays\n    if (!Array.isArray(rolesNames)) rolesNames = [rolesNames]\n\n    rolesNames.forEach(function (roleName) {\n      Roles._addRoleToParent(roleName, parentName)\n    })\n  },\n\n  /**\n   * @method _addRoleToParent\n   * @param {String} roleName Name of role.\n   * @param {String} parentName Name of parent role.\n   * @private\n   * @static\n   */\n  _addRoleToParent: function (roleName, parentName) {\n    Roles._checkRoleName(roleName)\n    Roles._checkRoleName(parentName)\n\n    // query to get role's children\n    const role = Meteor.roles.findOne({ _id: roleName })\n\n    if (!role) {\n      throw new Error('Role \\'' + roleName + '\\' does not exist.')\n    }\n\n    // detect cycles\n    if (Roles._getInheritedRoleNames(role).includes(parentName)) {\n      throw new Error('Roles \\'' + roleName + '\\' and \\'' + parentName + '\\' would form a cycle.')\n    }\n\n    const count = Meteor.roles.update({\n      _id: parentName,\n      'children._id': {\n        $ne: role._id\n      }\n    }, {\n      $push: {\n        children: {\n          _id: role._id\n        }\n      }\n    })\n\n    // if there was no change, parent role might not exist, or role is\n    // already a subrole; in any case we do not have anything more to do\n    if (!count) return\n\n    Meteor.roleAssignment.update({\n      'inheritedRoles._id': parentName\n    }, {\n      $push: {\n        inheritedRoles: { $each: [role._id, ...Roles._getInheritedRoleNames(role)].map(r => ({ _id: r })) }\n      }\n    }, { multi: true })\n  },\n\n  /**\n   * Remove role parent from roles.\n   *\n   * Other parents are kept (role can have multiple parents). For users which have the\n   * parent role set, removed subrole is removed automatically.\n   *\n   * @method removeRolesFromParent\n   * @param {Array|String} rolesNames Name(s) of role(s).\n   * @param {String} parentName Name of parent role.\n   * @static\n   */\n  removeRolesFromParent: function (rolesNames, parentName) {\n    // ensure arrays\n    if (!Array.isArray(rolesNames)) rolesNames = [rolesNames]\n\n    rolesNames.forEach(function (roleName) {\n      Roles._removeRoleFromParent(roleName, parentName)\n    })\n  },\n\n  /**\n   * @method _removeRoleFromParent\n   * @param {String} roleName Name of role.\n   * @param {String} parentName Name of parent role.\n   * @private\n   * @static\n   */\n  _removeRoleFromParent: function (roleName, parentName) {\n    Roles._checkRoleName(roleName)\n    Roles._checkRoleName(parentName)\n\n    // check for role existence\n    // this would not really be needed, but we are trying to match addRolesToParent\n    const role = Meteor.roles.findOne({ _id: roleName }, { fields: { _id: 1 } })\n\n    if (!role) {\n      throw new Error('Role \\'' + roleName + '\\' does not exist.')\n    }\n\n    const count = Meteor.roles.update({\n      _id: parentName\n    }, {\n      $pull: {\n        children: {\n          _id: role._id\n        }\n      }\n    })\n\n    // if there was no change, parent role might not exist, or role was\n    // already not a subrole; in any case we do not have anything more to do\n    if (!count) return\n\n    // For all roles who have had it as a dependency ...\n    const roles = [...Roles._getParentRoleNames(Meteor.roles.findOne({ _id: parentName })), parentName]\n\n    Meteor.roles.find({ _id: { $in: roles } }).fetch().forEach(r => {\n      const inheritedRoles = Roles._getInheritedRoleNames(Meteor.roles.findOne({ _id: r._id }))\n      Meteor.roleAssignment.update({\n        'role._id': r._id,\n        'inheritedRoles._id': role._id\n      }, {\n        $set: {\n          inheritedRoles: [r._id, ...inheritedRoles].map(r2 => ({ _id: r2 }))\n        }\n      }, { multi: true })\n    })\n  },\n\n  /**\n   * Add users to roles.\n   *\n   * Adds roles to existing roles for each user.\n   *\n   * @example\n   *     Roles.addUsersToRoles(userId, 'admin')\n   *     Roles.addUsersToRoles(userId, ['view-secrets'], 'example.com')\n   *     Roles.addUsersToRoles([user1, user2], ['user','editor'])\n   *     Roles.addUsersToRoles([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')\n   *\n   * @method addUsersToRoles\n   * @param {Array|String} users User ID(s) or object(s) with an `_id` field.\n   * @param {Array|String} roles Name(s) of roles to add users to. Roles have to exist.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of the scope, or `null` for the global role\n   *   - `ifExists`: if `true`, do not throw an exception if the role does not exist\n   *\n   * Alternatively, it can be a scope name string.\n   * @static\n   */\n  addUsersToRoles: function (users, roles, options) {\n    let id\n\n    if (!users) throw new Error('Missing \\'users\\' param.')\n    if (!roles) throw new Error('Missing \\'roles\\' param.')\n\n    options = Roles._normalizeOptions(options)\n\n    // ensure arrays\n    if (!Array.isArray(users)) users = [users]\n    if (!Array.isArray(roles)) roles = [roles]\n\n    Roles._checkScopeName(options.scope)\n\n    options = Object.assign({\n      ifExists: false\n    }, options)\n\n    users.forEach(function (user) {\n      if (typeof user === 'object') {\n        id = user._id\n      } else {\n        id = user\n      }\n\n      roles.forEach(function (role) {\n        Roles._addUserToRole(id, role, options)\n      })\n    })\n  },\n\n  /**\n   * Set users' roles.\n   *\n   * Replaces all existing roles with a new set of roles.\n   *\n   * @example\n   *     Roles.setUserRoles(userId, 'admin')\n   *     Roles.setUserRoles(userId, ['view-secrets'], 'example.com')\n   *     Roles.setUserRoles([user1, user2], ['user','editor'])\n   *     Roles.setUserRoles([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')\n   *\n   * @method setUserRoles\n   * @param {Array|String} users User ID(s) or object(s) with an `_id` field.\n   * @param {Array|String} roles Name(s) of roles to add users to. Roles have to exist.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of the scope, or `null` for the global role\n   *   - `anyScope`: if `true`, remove all roles the user has, of any scope, if `false`, only the one in the same scope\n   *   - `ifExists`: if `true`, do not throw an exception if the role does not exist\n   *\n   * Alternatively, it can be a scope name string.\n   * @static\n   */\n  setUserRoles: function (users, roles, options) {\n    let id\n\n    if (!users) throw new Error('Missing \\'users\\' param.')\n    if (!roles) throw new Error('Missing \\'roles\\' param.')\n\n    options = Roles._normalizeOptions(options)\n\n    // ensure arrays\n    if (!Array.isArray(users)) users = [users]\n    if (!Array.isArray(roles)) roles = [roles]\n\n    Roles._checkScopeName(options.scope)\n\n    options = Object.assign({\n      ifExists: false,\n      anyScope: false\n    }, options)\n\n    users.forEach(function (user) {\n      if (typeof user === 'object') {\n        id = user._id\n      } else {\n        id = user\n      }\n      // we first clear all roles for the user\n      const selector = { 'user._id': id }\n      if (!options.anyScope) {\n        selector.scope = options.scope\n      }\n\n      Meteor.roleAssignment.remove(selector)\n\n      // and then add all\n      roles.forEach(function (role) {\n        Roles._addUserToRole(id, role, options)\n      })\n    })\n  },\n\n  /**\n   * Add one user to one role.\n   *\n   * @method _addUserToRole\n   * @param {String} userId The user ID.\n   * @param {String} roleName Name of the role to add the user to. The role have to exist.\n   * @param {Object} options Options:\n   *   - `scope`: name of the scope, or `null` for the global role\n   *   - `ifExists`: if `true`, do not throw an exception if the role does not exist\n   * @private\n   * @static\n   */\n  _addUserToRole: function (userId, roleName, options) {\n    Roles._checkRoleName(roleName)\n    Roles._checkScopeName(options.scope)\n\n    if (!userId) {\n      return\n    }\n\n    const role = Meteor.roles.findOne({ _id: roleName }, { fields: { children: 1 } })\n\n    if (!role) {\n      if (options.ifExists) {\n        return []\n      } else {\n        throw new Error('Role \\'' + roleName + '\\' does not exist.')\n      }\n    }\n\n    // This might create duplicates, because we don't have a unique index, but that's all right. In case there are two, withdrawing the role will effectively kill them both.\n    const res = Meteor.roleAssignment.upsert({\n      'user._id': userId,\n      'role._id': roleName,\n      scope: options.scope\n    }, {\n      $setOnInsert: {\n        user: { _id: userId },\n        role: { _id: roleName },\n        scope: options.scope\n      }\n    })\n\n    if (res.insertedId) {\n      Meteor.roleAssignment.update({ _id: res.insertedId }, {\n        $set: {\n          inheritedRoles: [roleName, ...Roles._getInheritedRoleNames(role)].map(r => ({ _id: r }))\n        }\n      })\n    }\n\n    return res\n  },\n\n  /**\n   * Returns an array of role names the given role name is a child of.\n   *\n   * @example\n   *     Roles._getParentRoleNames({ _id: 'admin', children; [] })\n   *\n   * @method _getParentRoleNames\n   * @param {object} role The role object\n   * @private\n   * @static\n   */\n  _getParentRoleNames: function (role) {\n    if (!role) {\n      return []\n    }\n\n    const parentRoles = new Set([role._id])\n\n    parentRoles.forEach(roleName => {\n      Meteor.roles.find({ 'children._id': roleName }).fetch().forEach(parentRole => {\n        parentRoles.add(parentRole._id)\n      })\n    })\n\n    parentRoles.delete(role._id)\n\n    return [...parentRoles]\n  },\n\n  /**\n   * Returns an array of role names the given role name is a parent of.\n   *\n   * @example\n   *     Roles._getInheritedRoleNames({ _id: 'admin', children; [] })\n   *\n   * @method _getInheritedRoleNames\n   * @param {object} role The role object\n   * @private\n   * @static\n   */\n  _getInheritedRoleNames: function (role) {\n    const inheritedRoles = new Set()\n    const nestedRoles = new Set([role])\n\n    nestedRoles.forEach(r => {\n      const roles = Meteor.roles.find({ _id: { $in: r.children.map(r => r._id) } }, { fields: { children: 1 } }).fetch()\n\n      roles.forEach(r2 => {\n        inheritedRoles.add(r2._id)\n        nestedRoles.add(r2)\n      })\n    })\n\n    return [...inheritedRoles]\n  },\n\n  /**\n   * Remove users from assigned roles.\n   *\n   * @example\n   *     Roles.removeUsersFromRoles(userId, 'admin')\n   *     Roles.removeUsersFromRoles([userId, user2], ['editor'])\n   *     Roles.removeUsersFromRoles(userId, ['user'], 'group1')\n   *\n   * @method removeUsersFromRoles\n   * @param {Array|String} users User ID(s) or object(s) with an `_id` field.\n   * @param {Array|String} roles Name(s) of roles to remove users from. Roles have to exist.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of the scope, or `null` for the global role\n   *   - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n   *\n   * Alternatively, it can be a scope name string.\n   * @static\n   */\n  removeUsersFromRoles: function (users, roles, options) {\n    if (!users) throw new Error('Missing \\'users\\' param.')\n    if (!roles) throw new Error('Missing \\'roles\\' param.')\n\n    options = Roles._normalizeOptions(options)\n\n    // ensure arrays\n    if (!Array.isArray(users)) users = [users]\n    if (!Array.isArray(roles)) roles = [roles]\n\n    Roles._checkScopeName(options.scope)\n\n    users.forEach(function (user) {\n      if (!user) return\n\n      roles.forEach(function (role) {\n        let id\n        if (typeof user === 'object') {\n          id = user._id\n        } else {\n          id = user\n        }\n\n        Roles._removeUserFromRole(id, role, options)\n      })\n    })\n  },\n\n  /**\n   * Remove one user from one role.\n   *\n   * @method _removeUserFromRole\n   * @param {String} userId The user ID.\n   * @param {String} roleName Name of the role to add the user to. The role have to exist.\n   * @param {Object} options Options:\n   *   - `scope`: name of the scope, or `null` for the global role\n   *   - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n   * @private\n   * @static\n   */\n  _removeUserFromRole: function (userId, roleName, options) {\n    Roles._checkRoleName(roleName)\n    Roles._checkScopeName(options.scope)\n\n    if (!userId) return\n\n    const selector = {\n      'user._id': userId,\n      'role._id': roleName\n    }\n\n    if (!options.anyScope) {\n      selector.scope = options.scope\n    }\n\n    Meteor.roleAssignment.remove(selector)\n  },\n\n  /**\n   * Check if user has specified roles.\n   *\n   * @example\n   *     // global roles\n   *     Roles.userIsInRole(user, 'admin')\n   *     Roles.userIsInRole(user, ['admin','editor'])\n   *     Roles.userIsInRole(userId, 'admin')\n   *     Roles.userIsInRole(userId, ['admin','editor'])\n   *\n   *     // scope roles (global roles are still checked)\n   *     Roles.userIsInRole(user, 'admin', 'group1')\n   *     Roles.userIsInRole(userId, ['admin','editor'], 'group1')\n   *     Roles.userIsInRole(userId, ['admin','editor'], {scope: 'group1'})\n   *\n   * @method userIsInRole\n   * @param {String|Object} user User ID or an actual user object.\n   * @param {Array|String} roles Name of role or an array of roles to check against. If array,\n   *                             will return `true` if user is in _any_ role.\n   *                             Roles do not have to exist.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of the scope; if supplied, limits check to just that scope\n   *     the user's global roles will always be checked whether scope is specified or not\n   *   - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n   *\n   * Alternatively, it can be a scope name string.\n   * @return {Boolean} `true` if user is in _any_ of the target roles\n   * @static\n   */\n  userIsInRole: function (user, roles, options) {\n    let id\n    options = Roles._normalizeOptions(options)\n\n    // ensure array to simplify code\n    if (!Array.isArray(roles)) roles = [roles]\n\n    roles = roles.filter(r => r != null)\n\n    if (!roles.length) return false\n\n    Roles._checkScopeName(options.scope)\n\n    options = Object.assign({\n      anyScope: false\n    }, options)\n\n    if (user && typeof user === 'object') {\n      id = user._id\n    } else {\n      id = user\n    }\n\n    if (!id) return false\n    if (typeof id !== 'string') return false\n\n    const selector = { 'user._id': id }\n\n    if (!options.anyScope) {\n      selector.scope = { $in: [options.scope, null] }\n    }\n\n    return roles.some((roleName) => {\n      selector['inheritedRoles._id'] = roleName\n\n      return Meteor.roleAssignment.find(selector, { limit: 1 }).count() > 0\n    })\n  },\n\n  /**\n   * Retrieve user's roles.\n   *\n   * @method getRolesForUser\n   * @param {String|Object} user User ID or an actual user object.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of scope to provide roles for; if not specified, global roles are returned\n   *   - `anyScope`: if set, role can be in any scope (`scope` and `onlyAssigned` options are ignored)\n   *   - `onlyScoped`: if set, only roles in the specified scope are returned\n   *   - `onlyAssigned`: return only assigned roles and not automatically inferred (like subroles)\n   *   - `fullObjects`: return full roles objects (`true`) or just names (`false`) (`onlyAssigned` option is ignored) (default `false`)\n   *     If you have a use-case for this option, please file a feature-request. You shouldn't need to use it as it's\n   *     result strongly dependent on the internal data structure of this plugin.\n   *\n   * Alternatively, it can be a scope name string.\n   * @return {Array} Array of user's roles, unsorted.\n   * @static\n   */\n  getRolesForUser: function (user, options) {\n    let id\n\n    options = Roles._normalizeOptions(options)\n\n    Roles._checkScopeName(options.scope)\n\n    options = Object.assign({\n      fullObjects: false,\n      onlyAssigned: false,\n      anyScope: false,\n      onlyScoped: false\n    }, options)\n\n    if (user && typeof user === 'object') {\n      id = user._id\n    } else {\n      id = user\n    }\n\n    if (!id) return []\n\n    const selector = { 'user._id': id }\n    const filter = { fields: { 'inheritedRoles._id': 1 } }\n\n    if (!options.anyScope) {\n      selector.scope = { $in: [options.scope] }\n\n      if (!options.onlyScoped) {\n        selector.scope.$in.push(null)\n      }\n    }\n\n    if (options.onlyAssigned) {\n      delete filter.fields['inheritedRoles._id']\n      filter.fields['role._id'] = 1\n    }\n\n    if (options.fullObjects) {\n      delete filter.fields\n    }\n\n    const roles = Meteor.roleAssignment.find(selector, filter).fetch()\n\n    if (options.fullObjects) {\n      return roles\n    }\n\n    return [...new Set(roles.reduce((rev, current) => {\n      if (current.inheritedRoles) {\n        return rev.concat(current.inheritedRoles.map(r => r._id))\n      } else if (current.role) {\n        rev.push(current.role._id)\n      }\n      return rev\n    }, []))]\n  },\n\n  /**\n   * Retrieve cursor of all existing roles.\n   *\n   * @method getAllRoles\n   * @param {Object} queryOptions Options which are passed directly\n   *                                through to `Meteor.roles.find(query, options)`.\n   * @return {Cursor} Cursor of existing roles.\n   * @static\n   */\n  getAllRoles: function (queryOptions) {\n    queryOptions = queryOptions || { sort: { _id: 1 } }\n\n    return Meteor.roles.find({}, queryOptions)\n  },\n\n  /**\n   * Retrieve all users who are in target role.\n   *\n   * Options:\n   *\n   * @method getUsersInRole\n   * @param {Array|String} roles Name of role or an array of roles. If array, users\n   *                             returned will have at least one of the roles\n   *                             specified but need not have _all_ roles.\n   *                             Roles do not have to exist.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of the scope to restrict roles to; user's global\n   *     roles will also be checked\n   *   - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n   *   - `onlyScoped`: if set, only roles in the specified scope are returned\n   *   - `queryOptions`: options which are passed directly\n   *     through to `Meteor.users.find(query, options)`\n   *\n   * Alternatively, it can be a scope name string.\n   * @param {Object} [queryOptions] Options which are passed directly\n   *                                through to `Meteor.users.find(query, options)`\n   * @return {Cursor} Cursor of users in roles.\n   * @static\n   */\n  getUsersInRole: function (roles, options, queryOptions) {\n    const ids = Roles.getUserAssignmentsForRole(roles, options).fetch().map(a => a.user._id)\n\n    return Meteor.users.find({ _id: { $in: ids } }, ((options && options.queryOptions) || queryOptions) || {})\n  },\n\n  /**\n   * Retrieve all assignments of a user which are for the target role.\n   *\n   * Options:\n   *\n   * @method getUserAssignmentsForRole\n   * @param {Array|String} roles Name of role or an array of roles. If array, users\n   *                             returned will have at least one of the roles\n   *                             specified but need not have _all_ roles.\n   *                             Roles do not have to exist.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of the scope to restrict roles to; user's global\n   *     roles will also be checked\n   *   - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n   *   - `queryOptions`: options which are passed directly\n   *     through to `Meteor.roleAssignment.find(query, options)`\n   *\n   * Alternatively, it can be a scope name string.\n   * @return {Cursor} Cursor of user assignments for roles.\n   * @static\n   */\n  getUserAssignmentsForRole: function (roles, options) {\n    options = Roles._normalizeOptions(options)\n\n    options = Object.assign({\n      anyScope: false,\n      queryOptions: {}\n    }, options)\n\n    return Roles._getUsersInRoleCursor(roles, options, options.queryOptions)\n  },\n\n  /**\n   * @method _getUsersInRoleCursor\n   * @param {Array|String} roles Name of role or an array of roles. If array, ids of users are\n   *                             returned which have at least one of the roles\n   *                             assigned but need not have _all_ roles.\n   *                             Roles do not have to exist.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of the scope to restrict roles to; user's global\n   *     roles will also be checked\n   *   - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n   *\n   * Alternatively, it can be a scope name string.\n   * @param {Object} [filter] Options which are passed directly\n   *                                through to `Meteor.roleAssignment.find(query, options)`\n   * @return {Object} Cursor to the assignment documents\n   * @private\n   * @static\n   */\n  _getUsersInRoleCursor: function (roles, options, filter) {\n    options = Roles._normalizeOptions(options)\n\n    options = Object.assign({\n      anyScope: false,\n      onlyScoped: false\n    }, options)\n\n    // ensure array to simplify code\n    if (!Array.isArray(roles)) roles = [roles]\n\n    Roles._checkScopeName(options.scope)\n\n    filter = Object.assign({\n      fields: { 'user._id': 1 }\n    }, filter)\n\n    const selector = { 'inheritedRoles._id': { $in: roles } }\n\n    if (!options.anyScope) {\n      selector.scope = { $in: [options.scope] }\n\n      if (!options.onlyScoped) {\n        selector.scope.$in.push(null)\n      }\n    }\n\n    return Meteor.roleAssignment.find(selector, filter)\n  },\n\n  /**\n   * Deprecated. Use `getScopesForUser` instead.\n   *\n   * @method getGroupsForUser\n   * @static\n   * @deprecated\n   */\n  getGroupsForUser: function (...args) {\n    if (!getGroupsForUserDeprecationWarning) {\n      getGroupsForUserDeprecationWarning = true\n      console && console.warn('getGroupsForUser has been deprecated. Use getScopesForUser instead.')\n    }\n\n    return Roles.getScopesForUser(...args)\n  },\n\n  /**\n   * Retrieve users scopes, if any.\n   *\n   * @method getScopesForUser\n   * @param {String|Object} user User ID or an actual user object.\n   * @param {Array|String} [roles] Name of roles to restrict scopes to.\n   *\n   * @return {Array} Array of user's scopes, unsorted.\n   * @static\n   */\n  getScopesForUser: function (user, roles) {\n    let id\n\n    if (roles && !Array.isArray(roles)) roles = [roles]\n\n    if (user && typeof user === 'object') {\n      id = user._id\n    } else {\n      id = user\n    }\n\n    if (!id) return []\n\n    const selector = {\n      'user._id': id,\n      scope: { $ne: null }\n    }\n\n    if (roles) {\n      selector['inheritedRoles._id'] = { $in: roles }\n    }\n\n    const scopes = Meteor.roleAssignment.find(selector, { fields: { scope: 1 } }).fetch().map(obi => obi.scope)\n\n    return [...new Set(scopes)]\n  },\n\n  /**\n   * Rename a scope.\n   *\n   * Roles assigned with a given scope are changed to be under the new scope.\n   *\n   * @method renameScope\n   * @param {String} oldName Old name of a scope.\n   * @param {String} newName New name of a scope.\n   * @static\n   */\n  renameScope: function (oldName, newName) {\n    let count\n\n    Roles._checkScopeName(oldName)\n    Roles._checkScopeName(newName)\n\n    if (oldName === newName) return\n\n    do {\n      count = Meteor.roleAssignment.update({\n        scope: oldName\n      }, {\n        $set: {\n          scope: newName\n        }\n      }, { multi: true })\n    } while (count > 0)\n  },\n\n  /**\n   * Remove a scope.\n   *\n   * Roles assigned with a given scope are removed.\n   *\n   * @method removeScope\n   * @param {String} name The name of a scope.\n   * @static\n   */\n  removeScope: function (name) {\n    Roles._checkScopeName(name)\n\n    Meteor.roleAssignment.remove({ scope: name })\n  },\n\n  /**\n   * Throw an exception if `roleName` is an invalid role name.\n   *\n   * @method _checkRoleName\n   * @param {String} roleName A role name to match against.\n   * @private\n   * @static\n   */\n  _checkRoleName: function (roleName) {\n    if (!roleName || typeof roleName !== 'string' || roleName.trim() !== roleName) {\n      throw new Error('Invalid role name \\'' + roleName + '\\'.')\n    }\n  },\n\n  /**\n   * Find out if a role is an ancestor of another role.\n   *\n   * WARNING: If you check this on the client, please make sure all roles are published.\n   *\n   * @method isParentOf\n   * @param {String} parentRoleName The role you want to research.\n   * @param {String} childRoleName The role you expect to be among the children of parentRoleName.\n   * @static\n   */\n  isParentOf: function (parentRoleName, childRoleName) {\n    if (parentRoleName === childRoleName) {\n      return true\n    }\n\n    if (parentRoleName == null || childRoleName == null) {\n      return false\n    }\n\n    Roles._checkRoleName(parentRoleName)\n    Roles._checkRoleName(childRoleName)\n\n    let rolesToCheck = [parentRoleName]\n    while (rolesToCheck.length !== 0) {\n      const roleName = rolesToCheck.pop()\n\n      if (roleName === childRoleName) {\n        return true\n      }\n\n      const role = Meteor.roles.findOne({ _id: roleName })\n\n      // This should not happen, but this is a problem to address at some other time.\n      if (!role) continue\n\n      rolesToCheck = rolesToCheck.concat(role.children.map(r => r._id))\n    }\n\n    return false\n  },\n\n  /**\n   * Normalize options.\n   *\n   * @method _normalizeOptions\n   * @param {Object} options Options to normalize.\n   * @return {Object} Normalized options.\n   * @private\n   * @static\n   */\n  _normalizeOptions: function (options) {\n    options = options === undefined ? {} : options\n\n    if (options === null || typeof options === 'string') {\n      options = { scope: options }\n    }\n\n    options.scope = Roles._normalizeScopeName(options.scope)\n\n    return options\n  },\n\n  /**\n   * Normalize scope name.\n   *\n   * @method _normalizeScopeName\n   * @param {String} scopeName A scope name to normalize.\n   * @return {String} Normalized scope name.\n   * @private\n   * @static\n   */\n  _normalizeScopeName: function (scopeName) {\n    // map undefined and null to null\n    if (scopeName == null) {\n      return null\n    } else {\n      return scopeName\n    }\n  },\n\n  /**\n   * Throw an exception if `scopeName` is an invalid scope name.\n   *\n   * @method _checkRoleName\n   * @param {String} scopeName A scope name to match against.\n   * @private\n   * @static\n   */\n  _checkScopeName: function (scopeName) {\n    if (scopeName === null) return\n\n    if (!scopeName || typeof scopeName !== 'string' || scopeName.trim() !== scopeName) {\n      throw new Error('Invalid scope name \\'' + scopeName + '\\'.')\n    }\n  }\n})\n","/* global Roles */\nimport { Meteor } from 'meteor/meteor'\nimport { Mongo } from 'meteor/mongo'\n\n/**\n * Provides functions related to user authorization. Compatible with built-in Meteor accounts packages.\n *\n * Roles are accessible throgh `Meteor.roles` collection and documents consist of:\n *  - `_id`: role name\n *  - `children`: list of subdocuments:\n *    - `_id`\n *\n * Children list elements are subdocuments so that they can be easier extended in the future or by plugins.\n *\n * Roles can have multiple parents and can be children (subroles) of multiple roles.\n *\n * Example: `{_id: 'admin', children: [{_id: 'editor'}]}`\n *\n * The assignment of a role to a user is stored in a collection, accessible through `Meteor.roleAssignment`.\n * It's documents consist of\n *  - `_id`: Internal MongoDB id\n *  - `role`: A role object which got assigned. Usually only contains the `_id` property\n *  - `user`: A user object, usually only contains the `_id` property\n *  - `scope`: scope name\n *  - `inheritedRoles`: A list of all the roles objects inherited by the assigned role.\n *\n * @module Roles\n */\nif (!Meteor.roles) {\n  Meteor.roles = new Mongo.Collection('roles')\n}\n\nif (!Meteor.roleAssignment) {\n  Meteor.roleAssignment = new Mongo.Collection('role-assignment')\n}\n\n/**\n * @class Roles\n */\nif (typeof Roles === 'undefined') {\n  Roles = {} // eslint-disable-line no-global-assign\n}\n\nlet getGroupsForUserDeprecationWarning = false\n\n/**\n * Helper, resolves async some\n * @param {*} arr\n * @param {*} predicate\n * @returns {Promise<Boolean>}\n */\nconst asyncSome = async (arr, predicate) => {\n  for (const e of arr) {\n    if (await predicate(e)) return true\n  }\n  return false\n}\n\nObject.assign(Roles, {\n  /**\n   * Used as a global group (now scope) name. Not used anymore.\n   *\n   * @property GLOBAL_GROUP\n   * @static\n   * @deprecated\n   */\n  GLOBAL_GROUP: null,\n\n  /**\n   * Create a new role.\n   *\n   * @method createRoleAsync\n   * @param {String} roleName Name of role.\n   * @param {Object} [options] Options:\n   *   - `unlessExists`: if `true`, exception will not be thrown in the role already exists\n   * @return {Promise<String>} ID of the new role or null.\n   * @static\n   */\n  createRoleAsync: async function (roleName, options) {\n    Roles._checkRoleName(roleName)\n\n    options = Object.assign(\n      {\n        unlessExists: false\n      },\n      options\n    )\n\n    let insertedId = null\n\n    const existingRole = await Meteor.roles.findOneAsync({ _id: roleName })\n\n    if (existingRole) {\n      await Meteor.roles.updateAsync(\n        { _id: roleName },\n        { $setOnInsert: { children: [] } }\n      )\n      return null\n    } else {\n      insertedId = await Meteor.roles.insertAsync({\n        _id: roleName,\n        children: []\n      })\n    }\n\n    if (!insertedId) {\n      if (options.unlessExists) return null\n      throw new Error(\"Role '\" + roleName + \"' already exists.\")\n    }\n\n    return insertedId\n  },\n\n  /**\n   * Delete an existing role.\n   *\n   * If the role is set for any user, it is automatically unset.\n   *\n   * @method deleteRoleAsync\n   * @param {String} roleName Name of role.\n   * @returns {Promise}\n   * @static\n   */\n  deleteRoleAsync: async function (roleName) {\n    let roles\n    let inheritedRoles\n\n    Roles._checkRoleName(roleName)\n\n    // Remove all assignments\n    await Meteor.roleAssignment.removeAsync({\n      'role._id': roleName\n    })\n\n    do {\n      // For all roles who have it as a dependency ...\n      roles = Roles._getParentRoleNames(\n        await Meteor.roles.findOneAsync({ _id: roleName })\n      )\n\n      for (const r of await Meteor.roles\n        .find({ _id: { $in: roles } })\n        .fetchAsync()) {\n        await Meteor.roles.updateAsync(\n          {\n            _id: r._id\n          },\n          {\n            $pull: {\n              children: {\n                _id: roleName\n              }\n            }\n          }\n        )\n\n        inheritedRoles = await Roles._getInheritedRoleNamesAsync(\n          await Meteor.roles.findOneAsync({ _id: r._id })\n        )\n        await Meteor.roleAssignment.updateAsync(\n          {\n            'role._id': r._id\n          },\n          {\n            $set: {\n              inheritedRoles: [r._id, ...inheritedRoles].map((r2) => ({\n                _id: r2\n              }))\n            }\n          },\n          { multi: true }\n        )\n      }\n    } while (roles.length > 0)\n\n    // And finally remove the role itself\n    await Meteor.roles.removeAsync({ _id: roleName })\n  },\n\n  /**\n   * Rename an existing role.\n   *\n   * @method renameRoleAsync\n   * @param {String} oldName Old name of a role.\n   * @param {String} newName New name of a role.\n   * @returns {Promise}\n   * @static\n   */\n  renameRoleAsync: async function (oldName, newName) {\n    let count\n\n    Roles._checkRoleName(oldName)\n    Roles._checkRoleName(newName)\n\n    if (oldName === newName) return\n\n    const role = await Meteor.roles.findOneAsync({ _id: oldName })\n\n    if (!role) {\n      throw new Error(\"Role '\" + oldName + \"' does not exist.\")\n    }\n\n    role._id = newName\n\n    await Meteor.roles.insertAsync(role)\n\n    do {\n      count = await Meteor.roleAssignment.updateAsync(\n        {\n          'role._id': oldName\n        },\n        {\n          $set: {\n            'role._id': newName\n          }\n        },\n        { multi: true }\n      )\n    } while (count > 0)\n\n    do {\n      count = await Meteor.roleAssignment.updateAsync(\n        {\n          'inheritedRoles._id': oldName\n        },\n        {\n          $set: {\n            'inheritedRoles.$._id': newName\n          }\n        },\n        { multi: true }\n      )\n    } while (count > 0)\n\n    do {\n      count = await Meteor.roles.updateAsync(\n        {\n          'children._id': oldName\n        },\n        {\n          $set: {\n            'children.$._id': newName\n          }\n        },\n        { multi: true }\n      )\n    } while (count > 0)\n\n    await Meteor.roles.removeAsync({ _id: oldName })\n  },\n\n  /**\n   * Add role parent to roles.\n   *\n   * Previous parents are kept (role can have multiple parents). For users which have the\n   * parent role set, new subroles are added automatically.\n   *\n   * @method addRolesToParentAsync\n   * @param {Array|String} rolesNames Name(s) of role(s).\n   * @param {String} parentName Name of parent role.\n   * @returns {Promise}\n   * @static\n   */\n  addRolesToParentAsync: async function (rolesNames, parentName) {\n    // ensure arrays\n    if (!Array.isArray(rolesNames)) rolesNames = [rolesNames]\n\n    for (const roleName of rolesNames) {\n      await Roles._addRoleToParentAsync(roleName, parentName)\n    }\n  },\n\n  /**\n   * @method _addRoleToParentAsync\n   * @param {String} roleName Name of role.\n   * @param {String} parentName Name of parent role.\n   * @returns {Promise}\n   * @private\n   * @static\n   */\n  _addRoleToParentAsync: async function (roleName, parentName) {\n    Roles._checkRoleName(roleName)\n    Roles._checkRoleName(parentName)\n\n    // query to get role's children\n    const role = await Meteor.roles.findOneAsync({ _id: roleName })\n\n    if (!role) {\n      throw new Error(\"Role '\" + roleName + \"' does not exist.\")\n    }\n\n    // detect cycles\n    if ((await Roles._getInheritedRoleNamesAsync(role)).includes(parentName)) {\n      throw new Error(\n        \"Roles '\" + roleName + \"' and '\" + parentName + \"' would form a cycle.\"\n      )\n    }\n\n    const count = await Meteor.roles.updateAsync(\n      {\n        _id: parentName,\n        'children._id': {\n          $ne: role._id\n        }\n      },\n      {\n        $push: {\n          children: {\n            _id: role._id\n          }\n        }\n      }\n    )\n\n    // if there was no change, parent role might not exist, or role is\n    // already a sub-role; in any case we do not have anything more to do\n    if (!count) return\n\n    await Meteor.roleAssignment.updateAsync(\n      {\n        'inheritedRoles._id': parentName\n      },\n      {\n        $push: {\n          inheritedRoles: {\n            $each: [\n              role._id,\n              ...(await Roles._getInheritedRoleNamesAsync(role))\n            ].map((r) => ({ _id: r }))\n          }\n        }\n      },\n      { multi: true }\n    )\n  },\n\n  /**\n   * Remove role parent from roles.\n   *\n   * Other parents are kept (role can have multiple parents). For users which have the\n   * parent role set, removed subrole is removed automatically.\n   *\n   * @method removeRolesFromParentAsync\n   * @param {Array|String} rolesNames Name(s) of role(s).\n   * @param {String} parentName Name of parent role.\n   * @returns {Promise}\n   * @static\n   */\n  removeRolesFromParentAsync: async function (rolesNames, parentName) {\n    // ensure arrays\n    if (!Array.isArray(rolesNames)) rolesNames = [rolesNames]\n\n    for (const roleName of rolesNames) {\n      await Roles._removeRoleFromParentAsync(roleName, parentName)\n    }\n  },\n\n  /**\n   * @method _removeRoleFromParentAsync\n   * @param {String} roleName Name of role.\n   * @param {String} parentName Name of parent role.\n   * @returns {Promise}\n   * @private\n   * @static\n   */\n  _removeRoleFromParentAsync: async function (roleName, parentName) {\n    Roles._checkRoleName(roleName)\n    Roles._checkRoleName(parentName)\n\n    // check for role existence\n    // this would not really be needed, but we are trying to match addRolesToParent\n    const role = await Meteor.roles.findOneAsync(\n      { _id: roleName },\n      { fields: { _id: 1 } }\n    )\n\n    if (!role) {\n      throw new Error(\"Role '\" + roleName + \"' does not exist.\")\n    }\n\n    const count = await Meteor.roles.updateAsync(\n      {\n        _id: parentName\n      },\n      {\n        $pull: {\n          children: {\n            _id: role._id\n          }\n        }\n      }\n    )\n\n    // if there was no change, parent role might not exist, or role was\n    // already not a subrole; in any case we do not have anything more to do\n    if (!count) return\n\n    // For all roles who have had it as a dependency ...\n    const roles = [\n      ...(await Roles._getParentRoleNamesAsync(\n        await Meteor.roles.findOneAsync({ _id: parentName })\n      )),\n      parentName\n    ]\n\n    for (const r of await Meteor.roles\n      .find({ _id: { $in: roles } })\n      .fetchAsync()) {\n      const inheritedRoles = await Roles._getInheritedRoleNamesAsync(\n        await Meteor.roles.findOneAsync({ _id: r._id })\n      )\n      await Meteor.roleAssignment.updateAsync(\n        {\n          'role._id': r._id,\n          'inheritedRoles._id': role._id\n        },\n        {\n          $set: {\n            inheritedRoles: [r._id, ...inheritedRoles].map((r2) => ({\n              _id: r2\n            }))\n          }\n        },\n        { multi: true }\n      )\n    }\n  },\n\n  /**\n   * Add users to roles.\n   *\n   * Adds roles to existing roles for each user.\n   *\n   * @example\n   *     Roles.addUsersToRolesAsync(userId, 'admin')\n   *     Roles.addUsersToRolesAsync(userId, ['view-secrets'], 'example.com')\n   *     Roles.addUsersToRolesAsync([user1, user2], ['user','editor'])\n   *     Roles.addUsersToRolesAsync([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')\n   *\n   * @method addUsersToRolesAsync\n   * @param {Array|String} users User ID(s) or object(s) with an `_id` field.\n   * @param {Array|String} roles Name(s) of roles to add users to. Roles have to exist.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of the scope, or `null` for the global role\n   *   - `ifExists`: if `true`, do not throw an exception if the role does not exist\n   * @returns {Promise}\n   *\n   * Alternatively, it can be a scope name string.\n   * @static\n   */\n  addUsersToRolesAsync: async function (users, roles, options) {\n    let id\n\n    if (!users) throw new Error(\"Missing 'users' param.\")\n    if (!roles) throw new Error(\"Missing 'roles' param.\")\n\n    options = Roles._normalizeOptions(options)\n\n    // ensure arrays\n    if (!Array.isArray(users)) users = [users]\n    if (!Array.isArray(roles)) roles = [roles]\n\n    Roles._checkScopeName(options.scope)\n\n    options = Object.assign(\n      {\n        ifExists: false\n      },\n      options\n    )\n\n    for (const user of users) {\n      if (typeof user === 'object') {\n        id = user._id\n      } else {\n        id = user\n      }\n\n      for (const role of roles) {\n        await Roles._addUserToRoleAsync(id, role, options)\n      }\n    }\n  },\n\n  /**\n   * Set users' roles.\n   *\n   * Replaces all existing roles with a new set of roles.\n   *\n   * @example\n   *     await Roles.setUserRolesAsync(userId, 'admin')\n   *     await Roles.setUserRolesAsync(userId, ['view-secrets'], 'example.com')\n   *     await Roles.setUserRolesAsync([user1, user2], ['user','editor'])\n   *     await Roles.setUserRolesAsync([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')\n   *\n   * @method setUserRolesAsync\n   * @param {Array|String} users User ID(s) or object(s) with an `_id` field.\n   * @param {Array|String} roles Name(s) of roles to add users to. Roles have to exist.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of the scope, or `null` for the global role\n   *   - `anyScope`: if `true`, remove all roles the user has, of any scope, if `false`, only the one in the same scope\n   *   - `ifExists`: if `true`, do not throw an exception if the role does not exist\n   * @returns {Promise}\n   *\n   * Alternatively, it can be a scope name string.\n   * @static\n   */\n  setUserRolesAsync: async function (users, roles, options) {\n    let id\n\n    if (!users) throw new Error(\"Missing 'users' param.\")\n    if (!roles) throw new Error(\"Missing 'roles' param.\")\n\n    options = Roles._normalizeOptions(options)\n\n    // ensure arrays\n    if (!Array.isArray(users)) users = [users]\n    if (!Array.isArray(roles)) roles = [roles]\n\n    Roles._checkScopeName(options.scope)\n\n    options = Object.assign(\n      {\n        ifExists: false,\n        anyScope: false\n      },\n      options\n    )\n\n    for (const user of users) {\n      if (typeof user === 'object') {\n        id = user._id\n      } else {\n        id = user\n      }\n      // we first clear all roles for the user\n      const selector = { 'user._id': id }\n      if (!options.anyScope) {\n        selector.scope = options.scope\n      }\n\n      await Meteor.roleAssignment.removeAsync(selector)\n\n      // and then add all\n      for (const role of roles) {\n        await Roles._addUserToRole(id, role, options)\n      }\n    }\n  },\n\n  /**\n   * Add one user to one role.\n   *\n   * @method _addUserToRole\n   * @param {String} userId The user ID.\n   * @param {String} roleName Name of the role to add the user to. The role have to exist.\n   * @param {Object} options Options:\n   *   - `scope`: name of the scope, or `null` for the global role\n   *   - `ifExists`: if `true`, do not throw an exception if the role does not exist\n   * @returns {Promise}\n   * @private\n   * @static\n   */\n  _addUserToRoleAsync: async function (userId, roleName, options) {\n    Roles._checkRoleName(roleName)\n    Roles._checkScopeName(options.scope)\n\n    if (!userId) {\n      return\n    }\n\n    const role = await Meteor.roles.findOneAsync(\n      { _id: roleName },\n      { fields: { children: 1 } }\n    )\n\n    if (!role) {\n      if (options.ifExists) {\n        return []\n      } else {\n        throw new Error(\"Role '\" + roleName + \"' does not exist.\")\n      }\n    }\n\n    // This might create duplicates, because we don't have a unique index, but that's all right. In case there are two, withdrawing the role will effectively kill them both.\n    // TODO revisit this\n    /* const res = await Meteor.roleAssignment.upsertAsync(\n      {\n        \"user._id\": userId,\n        \"role._id\": roleName,\n        scope: options.scope,\n      },\n      {\n        $setOnInsert: {\n          user: { _id: userId },\n          role: { _id: roleName },\n          scope: options.scope,\n        },\n      }\n    ); */\n    const existingAssignment = await Meteor.roleAssignment.findOneAsync({\n      'user._id': userId,\n      'role._id': roleName,\n      scope: options.scope\n    })\n\n    let insertedId\n    let res\n    if (existingAssignment) {\n      await Meteor.roleAssignment.updateAsync(existingAssignment._id, {\n        $set: {\n          user: { _id: userId },\n          role: { _id: roleName },\n          scope: options.scope\n        }\n      })\n\n      res = await Meteor.roleAssignment.findOneAsync(existingAssignment._id)\n    } else {\n      insertedId = await Meteor.roleAssignment.insertAsync({\n        user: { _id: userId },\n        role: { _id: roleName },\n        scope: options.scope\n      })\n    }\n\n    if (insertedId) {\n      await Meteor.roleAssignment.updateAsync(\n        { _id: insertedId },\n        {\n          $set: {\n            inheritedRoles: [\n              roleName,\n              ...(await Roles._getInheritedRoleNamesAsync(role))\n            ].map((r) => ({ _id: r }))\n          }\n        }\n      )\n\n      res = await Meteor.roleAssignment.findOneAsync({ _id: insertedId })\n    }\n    res.insertedId = insertedId // For backward compatibility\n\n    return res\n  },\n\n  /**\n   * Returns an array of role names the given role name is a child of.\n   *\n   * @example\n   *     Roles._getParentRoleNames({ _id: 'admin', children; [] })\n   *\n   * @method _getParentRoleNames\n   * @param {object} role The role object\n   * @returns {Promise}\n   * @private\n   * @static\n   */\n  _getParentRoleNamesAsync: async function (role) {\n    if (!role) {\n      return []\n    }\n\n    const parentRoles = new Set([role._id])\n\n    for (const roleName of parentRoles) {\n      for (const parentRole of await Meteor.roles\n        .find({ 'children._id': roleName })\n        .fetchAsync()) {\n        parentRoles.add(parentRole._id)\n      }\n    }\n\n    parentRoles.delete(role._id)\n\n    return [...parentRoles]\n  },\n\n  /**\n   * Returns an array of role names the given role name is a parent of.\n   *\n   * @example\n   *     Roles._getInheritedRoleNames({ _id: 'admin', children; [] })\n   *\n   * @method _getInheritedRoleNames\n   * @param {object} role The role object\n   * @returns {Promise}\n   * @private\n   * @static\n   */\n  _getInheritedRoleNamesAsync: async function (role) {\n    const inheritedRoles = new Set()\n    const nestedRoles = new Set([role])\n\n    for (const r of nestedRoles) {\n      const roles = await Meteor.roles\n        .find(\n          { _id: { $in: r.children.map((r) => r._id) } },\n          { fields: { children: 1 } }\n        )\n        .fetchAsync()\n\n      for (const r2 of roles) {\n        inheritedRoles.add(r2._id)\n        nestedRoles.add(r2)\n      }\n    }\n\n    return [...inheritedRoles]\n  },\n\n  /**\n   * Remove users from assigned roles.\n   *\n   * @example\n   *     await Roles.removeUsersFromRolesAsync(userId, 'admin')\n   *     await Roles.removeUsersFromRolesAsync([userId, user2], ['editor'])\n   *     await Roles.removeUsersFromRolesAsync(userId, ['user'], 'group1')\n   *\n   * @method removeUsersFromRolesAsync\n   * @param {Array|String} users User ID(s) or object(s) with an `_id` field.\n   * @param {Array|String} roles Name(s) of roles to remove users from. Roles have to exist.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of the scope, or `null` for the global role\n   *   - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n   * @returns {Promise}\n   *\n   * Alternatively, it can be a scope name string.\n   * @static\n   */\n  removeUsersFromRolesAsync: async function (users, roles, options) {\n    if (!users) throw new Error(\"Missing 'users' param.\")\n    if (!roles) throw new Error(\"Missing 'roles' param.\")\n\n    options = Roles._normalizeOptions(options)\n\n    // ensure arrays\n    if (!Array.isArray(users)) users = [users]\n    if (!Array.isArray(roles)) roles = [roles]\n\n    Roles._checkScopeName(options.scope)\n\n    for (const user of users) {\n      if (!user) return\n\n      for (const role of roles) {\n        let id\n        if (typeof user === 'object') {\n          id = user._id\n        } else {\n          id = user\n        }\n\n        await Roles._removeUserFromRoleAsync(id, role, options)\n      }\n    }\n  },\n\n  /**\n   * Remove one user from one role.\n   *\n   * @method _removeUserFromRole\n   * @param {String} userId The user ID.\n   * @param {String} roleName Name of the role to add the user to. The role have to exist.\n   * @param {Object} options Options:\n   *   - `scope`: name of the scope, or `null` for the global role\n   *   - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n   * @returns {Promise}\n   * @private\n   * @static\n   */\n  _removeUserFromRoleAsync: async function (userId, roleName, options) {\n    Roles._checkRoleName(roleName)\n    Roles._checkScopeName(options.scope)\n\n    if (!userId) return\n\n    const selector = {\n      'user._id': userId,\n      'role._id': roleName\n    }\n\n    if (!options.anyScope) {\n      selector.scope = options.scope\n    }\n\n    await Meteor.roleAssignment.removeAsync(selector)\n  },\n\n  /**\n   * Check if user has specified roles.\n   *\n   * @example\n   *     // global roles\n   *     await Roles.userIsInRoleAsync(user, 'admin')\n   *     await Roles.userIsInRoleAsync(user, ['admin','editor'])\n   *     await Roles.userIsInRoleAsync(userId, 'admin')\n   *     await Roles.userIsInRoleAsync(userId, ['admin','editor'])\n   *\n   *     // scope roles (global roles are still checked)\n   *     await Roles.userIsInRoleAsync(user, 'admin', 'group1')\n   *     await Roles.userIsInRoleAsync(userId, ['admin','editor'], 'group1')\n   *     await Roles.userIsInRoleAsync(userId, ['admin','editor'], {scope: 'group1'})\n   *\n   * @method userIsInRoleAsync\n   * @param {String|Object} user User ID or an actual user object.\n   * @param {Array|String} roles Name of role or an array of roles to check against. If array,\n   *                             will return `true` if user is in _any_ role.\n   *                             Roles do not have to exist.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of the scope; if supplied, limits check to just that scope\n   *     the user's global roles will always be checked whether scope is specified or not\n   *   - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n   *\n   * Alternatively, it can be a scope name string.\n   * @return {Promise<Boolean>} `true` if user is in _any_ of the target roles\n   * @static\n   */\n  userIsInRoleAsync: async function (user, roles, options) {\n    let id\n\n    options = Roles._normalizeOptions(options)\n\n    // ensure array to simplify code\n    if (!Array.isArray(roles)) roles = [roles]\n\n    roles = roles.filter((r) => r != null)\n\n    if (!roles.length) return false\n\n    Roles._checkScopeName(options.scope)\n\n    options = Object.assign(\n      {\n        anyScope: false\n      },\n      options\n    )\n\n    if (user && typeof user === 'object') {\n      id = user._id\n    } else {\n      id = user\n    }\n\n    if (!id) return false\n    if (typeof id !== 'string') return false\n\n    const selector = {\n      'user._id': id\n    }\n\n    if (!options.anyScope) {\n      selector.scope = { $in: [options.scope, null] }\n    }\n\n    const res = await asyncSome(roles, async (roleName) => {\n      selector['inheritedRoles._id'] = roleName\n      const out =\n        (await Meteor.roleAssignment\n          .find(selector, { limit: 1 })\n          .countAsync()) > 0\n      return out\n    })\n\n    return res\n  },\n\n  /**\n   * Retrieve user's roles.\n   *\n   * @method getRolesForUserAsync\n   * @param {String|Object} user User ID or an actual user object.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of scope to provide roles for; if not specified, global roles are returned\n   *   - `anyScope`: if set, role can be in any scope (`scope` and `onlyAssigned` options are ignored)\n   *   - `onlyScoped`: if set, only roles in the specified scope are returned\n   *   - `onlyAssigned`: return only assigned roles and not automatically inferred (like subroles)\n   *   - `fullObjects`: return full roles objects (`true`) or just names (`false`) (`onlyAssigned` option is ignored) (default `false`)\n   *     If you have a use-case for this option, please file a feature-request. You shouldn't need to use it as it's\n   *     result strongly dependent on the internal data structure of this plugin.\n   *\n   * Alternatively, it can be a scope name string.\n   * @return {Promise<Array>} Array of user's roles, unsorted.\n   * @static\n   */\n  getRolesForUserAsync: async function (user, options) {\n    let id\n\n    options = Roles._normalizeOptions(options)\n\n    Roles._checkScopeName(options.scope)\n\n    options = Object.assign({\n      fullObjects: false,\n      onlyAssigned: false,\n      anyScope: false,\n      onlyScoped: false\n    }, options)\n\n    if (user && typeof user === 'object') {\n      id = user._id\n    } else {\n      id = user\n    }\n\n    if (!id) return []\n\n    const selector = {\n      'user._id': id\n    }\n\n    const filter = {\n      fields: { 'inheritedRoles._id': 1 }\n    }\n\n    if (!options.anyScope) {\n      selector.scope = { $in: [options.scope] }\n\n      if (!options.onlyScoped) {\n        selector.scope.$in.push(null)\n      }\n    }\n\n    if (options.onlyAssigned) {\n      delete filter.fields['inheritedRoles._id']\n      filter.fields['role._id'] = 1\n    }\n\n    if (options.fullObjects) {\n      delete filter.fields\n    }\n\n    const roles = await Meteor.roleAssignment.find(selector, filter).fetchAsync()\n\n    if (options.fullObjects) {\n      return roles\n    }\n\n    return [\n      ...new Set(\n        roles.reduce((rev, current) => {\n          if (current.inheritedRoles) {\n            return rev.concat(current.inheritedRoles.map((r) => r._id))\n          } else if (current.role) {\n            rev.push(current.role._id)\n          }\n          return rev\n        }, [])\n      )\n    ]\n  },\n\n  /**\n   * Retrieve cursor of all existing roles.\n   *\n   * @method getAllRoles\n   * @param {Object} [queryOptions] Options which are passed directly\n   *                                through to `Meteor.roles.find(query, options)`.\n   * @return {Cursor} Cursor of existing roles.\n   * @static\n   */\n  getAllRoles: function (queryOptions) {\n    queryOptions = queryOptions || { sort: { _id: 1 } }\n\n    return Meteor.roles.find({}, queryOptions)\n  },\n\n  /**\n   * Retrieve all users who are in target role.\n   *\n   * Options:\n   *\n   * @method getUsersInRoleAsync\n   * @param {Array|String} roles Name of role or an array of roles. If array, users\n   *                             returned will have at least one of the roles\n   *                             specified but need not have _all_ roles.\n   *                             Roles do not have to exist.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of the scope to restrict roles to; user's global\n   *     roles will also be checked\n   *   - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n   *   - `onlyScoped`: if set, only roles in the specified scope are returned\n   *   - `queryOptions`: options which are passed directly\n   *     through to `Meteor.users.find(query, options)`\n   *\n   * Alternatively, it can be a scope name string.\n   * @param {Object} [queryOptions] Options which are passed directly\n   *                                through to `Meteor.users.find(query, options)`\n   * @return {Promise<Cursor>} Cursor of users in roles.\n   * @static\n   */\n  getUsersInRoleAsync: async function (roles, options, queryOptions) {\n    const ids = (\n      await Roles.getUserAssignmentsForRole(roles, options).fetchAsync()\n    ).map((a) => a.user._id)\n\n    return Meteor.users.find(\n      { _id: { $in: ids } },\n      (options && options.queryOptions) || queryOptions || {}\n    )\n  },\n\n  /**\n   * Retrieve all assignments of a user which are for the target role.\n   *\n   * Options:\n   *\n   * @method getUserAssignmentsForRole\n   * @param {Array|String} roles Name of role or an array of roles. If array, users\n   *                             returned will have at least one of the roles\n   *                             specified but need not have _all_ roles.\n   *                             Roles do not have to exist.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of the scope to restrict roles to; user's global\n   *     roles will also be checked\n   *   - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n   *   - `queryOptions`: options which are passed directly\n   *     through to `Meteor.roleAssignment.find(query, options)`\n\n   * Alternatively, it can be a scope name string.\n   * @return {Cursor} Cursor of user assignments for roles.\n   * @static\n   */\n  getUserAssignmentsForRole: function (roles, options) {\n    options = Roles._normalizeOptions(options)\n\n    options = Object.assign(\n      {\n        anyScope: false,\n        queryOptions: {}\n      },\n      options\n    )\n\n    return Roles._getUsersInRoleCursor(roles, options, options.queryOptions)\n  },\n\n  /**\n   * @method _getUsersInRoleCursor\n   * @param {Array|String} roles Name of role or an array of roles. If array, ids of users are\n   *                             returned which have at least one of the roles\n   *                             assigned but need not have _all_ roles.\n   *                             Roles do not have to exist.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of the scope to restrict roles to; user's global\n   *     roles will also be checked\n   *   - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n   *\n   * Alternatively, it can be a scope name string.\n   * @param {Object} [filter] Options which are passed directly\n   *                                through to `Meteor.roleAssignment.find(query, options)`\n   * @return {Object} Cursor to the assignment documents\n   * @private\n   * @static\n   */\n  _getUsersInRoleCursor: function (roles, options, filter) {\n    options = Roles._normalizeOptions(options)\n\n    options = Object.assign(\n      {\n        anyScope: false,\n        onlyScoped: false\n      },\n      options\n    )\n\n    // ensure array to simplify code\n    if (!Array.isArray(roles)) roles = [roles]\n\n    Roles._checkScopeName(options.scope)\n\n    filter = Object.assign(\n      {\n        fields: { 'user._id': 1 }\n      },\n      filter\n    )\n\n    const selector = {\n      'inheritedRoles._id': { $in: roles }\n    }\n\n    if (!options.anyScope) {\n      selector.scope = { $in: [options.scope] }\n\n      if (!options.onlyScoped) {\n        selector.scope.$in.push(null)\n      }\n    }\n\n    return Meteor.roleAssignment.find(selector, filter)\n  },\n\n  /**\n   * Deprecated. Use `getScopesForUser` instead.\n   *\n   * @method getGroupsForUserAsync\n   * @returns {Promise<Array>}\n   * @static\n   * @deprecated\n   */\n  getGroupsForUserAsync: async function (...args) {\n    if (!getGroupsForUserDeprecationWarning) {\n      getGroupsForUserDeprecationWarning = true\n      console &&\n        console.warn(\n          'getGroupsForUser has been deprecated. Use getScopesForUser instead.'\n        )\n    }\n\n    return await Roles.getScopesForUser(...args)\n  },\n\n  /**\n   * Retrieve users scopes, if any.\n   *\n   * @method getScopesForUserAsync\n   * @param {String|Object} user User ID or an actual user object.\n   * @param {Array|String} [roles] Name of roles to restrict scopes to.\n   *\n   * @return {Promise<Array>} Array of user's scopes, unsorted.\n   * @static\n   */\n  getScopesForUserAsync: async function (user, roles) {\n    let id\n\n    if (roles && !Array.isArray(roles)) roles = [roles]\n\n    if (user && typeof user === 'object') {\n      id = user._id\n    } else {\n      id = user\n    }\n\n    if (!id) return []\n\n    const selector = {\n      'user._id': id,\n      scope: { $ne: null }\n    }\n\n    if (roles) {\n      selector['inheritedRoles._id'] = { $in: roles }\n    }\n\n    const scopes = (\n      await Meteor.roleAssignment\n        .find(selector, { fields: { scope: 1 } })\n        .fetchAsync()\n    ).map((obi) => obi.scope)\n\n    return [...new Set(scopes)]\n  },\n\n  /**\n   * Rename a scope.\n   *\n   * Roles assigned with a given scope are changed to be under the new scope.\n   *\n   * @method renameScopeAsync\n   * @param {String} oldName Old name of a scope.\n   * @param {String} newName New name of a scope.\n   * @returns {Promise}\n   * @static\n   */\n  renameScopeAsync: async function (oldName, newName) {\n    let count\n\n    Roles._checkScopeName(oldName)\n    Roles._checkScopeName(newName)\n\n    if (oldName === newName) return\n\n    do {\n      count = await Meteor.roleAssignment.updateAsync(\n        {\n          scope: oldName\n        },\n        {\n          $set: {\n            scope: newName\n          }\n        },\n        { multi: true }\n      )\n    } while (count > 0)\n  },\n\n  /**\n   * Remove a scope.\n   *\n   * Roles assigned with a given scope are removed.\n   *\n   * @method removeScopeAsync\n   * @param {String} name The name of a scope.\n   * @returns {Promise}\n   * @static\n   */\n  removeScopeAsync: async function (name) {\n    Roles._checkScopeName(name)\n\n    await Meteor.roleAssignment.removeAsync({ scope: name })\n  },\n\n  /**\n   * Throw an exception if `roleName` is an invalid role name.\n   *\n   * @method _checkRoleName\n   * @param {String} roleName A role name to match against.\n   * @private\n   * @static\n   */\n  _checkRoleName: function (roleName) {\n    if (\n      !roleName ||\n      typeof roleName !== 'string' ||\n      roleName.trim() !== roleName\n    ) {\n      throw new Error(\"Invalid role name '\" + roleName + \"'.\")\n    }\n  },\n\n  /**\n   * Find out if a role is an ancestor of another role.\n   *\n   * WARNING: If you check this on the client, please make sure all roles are published.\n   *\n   * @method isParentOfAsync\n   * @param {String} parentRoleName The role you want to research.\n   * @param {String} childRoleName The role you expect to be among the children of parentRoleName.\n   * @returns {Promise}\n   * @static\n   */\n  isParentOfAsync: async function (parentRoleName, childRoleName) {\n    if (parentRoleName === childRoleName) {\n      return true\n    }\n\n    if (parentRoleName == null || childRoleName == null) {\n      return false\n    }\n\n    Roles._checkRoleName(parentRoleName)\n    Roles._checkRoleName(childRoleName)\n\n    let rolesToCheck = [parentRoleName]\n    while (rolesToCheck.length !== 0) {\n      const roleName = rolesToCheck.pop()\n\n      if (roleName === childRoleName) {\n        return true\n      }\n\n      const role = await Meteor.roles.findOneAsync({ _id: roleName })\n\n      // This should not happen, but this is a problem to address at some other time.\n      if (!role) continue\n\n      rolesToCheck = rolesToCheck.concat(role.children.map((r) => r._id))\n    }\n\n    return false\n  },\n\n  /**\n   * Normalize options.\n   *\n   * @method _normalizeOptions\n   * @param {Object} options Options to normalize.\n   * @return {Object} Normalized options.\n   * @private\n   * @static\n   */\n  _normalizeOptions: function (options) {\n    options = options === undefined ? {} : options\n\n    if (options === null || typeof options === 'string') {\n      options = { scope: options }\n    }\n\n    options.scope = Roles._normalizeScopeName(options.scope)\n\n    return options\n  },\n\n  /**\n   * Normalize scope name.\n   *\n   * @method _normalizeScopeName\n   * @param {String} scopeName A scope name to normalize.\n   * @return {String} Normalized scope name.\n   * @private\n   * @static\n   */\n  _normalizeScopeName: function (scopeName) {\n    // map undefined and null to null\n    if (scopeName == null) {\n      return null\n    } else {\n      return scopeName\n    }\n  },\n\n  /**\n   * Throw an exception if `scopeName` is an invalid scope name.\n   *\n   * @method _checkRoleName\n   * @param {String} scopeName A scope name to match against.\n   * @private\n   * @static\n   */\n  _checkScopeName: function (scopeName) {\n    if (scopeName === null) return\n\n    if (\n      !scopeName ||\n      typeof scopeName !== 'string' ||\n      scopeName.trim() !== scopeName\n    ) {\n      throw new Error(\"Invalid scope name '\" + scopeName + \"'.\")\n    }\n  }\n})\n","/* global Meteor, Roles */\nlet indexFnAssignment\nlet indexFnRoles\n\nif (Meteor.roles.createIndexAsync) {\n  indexFnAssignment = Meteor.roleAssignment.createIndexAsync.bind(Meteor.roleAssignment)\n  indexFnRoles = Meteor.roles.createIndexAsync.bind(Meteor.roles)\n} else if (Meteor.roles.createIndex) {\n  indexFnAssignment = Meteor.roleAssignment.createIndex.bind(Meteor.roleAssignment)\n  indexFnRoles = Meteor.roles.createIndex.bind(Meteor.roles)\n} else {\n  indexFnAssignment = Meteor.roleAssignment._ensureIndex.bind(Meteor.roleAssignment)\n  indexFnRoles = Meteor.roles._ensureIndex.bind(Meteor.roles)\n}\n\n[\n  { 'user._id': 1, 'inheritedRoles._id': 1, scope: 1 },\n  { 'user._id': 1, 'role._id': 1, scope: 1 },\n  { 'role._id': 1 },\n  { scope: 1, 'user._id': 1, 'inheritedRoles._id': 1 }, // Adding userId and roleId might speed up other queries depending on the first index\n  { 'inheritedRoles._id': 1 }\n].forEach(index => indexFnAssignment(index))\nindexFnRoles({ 'children._id': 1 })\n\n/*\n * Publish logged-in user's roles so client-side checks can work.\n *\n * Use a named publish function so clients can check `ready()` state.\n */\nMeteor.publish('_roles', function () {\n  const loggedInUserId = this.userId\n  const fields = { roles: 1 }\n\n  if (!loggedInUserId) {\n    this.ready()\n    return\n  }\n\n  return Meteor.users.find(\n    { _id: loggedInUserId },\n    { fields }\n  )\n})\n\nObject.assign(Roles, {\n  /**\n   * @method _isNewRole\n   * @param {Object} role `Meteor.roles` document.\n   * @return {Boolean} Returns `true` if the `role` is in the new format.\n   *                   If it is ambiguous or it is not, returns `false`.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _isNewRole: function (role) {\n    return !('name' in role) && 'children' in role\n  },\n\n  /**\n   * @method _isOldRole\n   * @param {Object} role `Meteor.roles` document.\n   * @return {Boolean} Returns `true` if the `role` is in the old format.\n   *                   If it is ambiguous or it is not, returns `false`.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _isOldRole: function (role) {\n    return 'name' in role && !('children' in role)\n  },\n\n  /**\n   * @method _isNewField\n   * @param {Array} roles `Meteor.users` document `roles` field.\n   * @return {Boolean} Returns `true` if the `roles` field is in the new format.\n   *                   If it is ambiguous or it is not, returns `false`.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _isNewField: function (roles) {\n    return Array.isArray(roles) && typeof roles[0] === 'object'\n  },\n\n  /**\n   * @method _isOldField\n   * @param {Array} roles `Meteor.users` document `roles` field.\n   * @return {Boolean} Returns `true` if the `roles` field is in the old format.\n   *                   If it is ambiguous or it is not, returns `false`.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _isOldField: function (roles) {\n    return (\n      (Array.isArray(roles) && typeof roles[0] === 'string') ||\n      (typeof roles === 'object' && !Array.isArray(roles))\n    )\n  },\n\n  /**\n   * @method _convertToNewRole\n   * @param {Object} oldRole `Meteor.roles` document.\n   * @return {Object} Converted `role` to the new format.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _convertToNewRole: function (oldRole) {\n    if (!(typeof oldRole.name === 'string')) { throw new Error(\"Role name '\" + oldRole.name + \"' is not a string.\") }\n\n    return {\n      _id: oldRole.name,\n      children: []\n    }\n  },\n\n  /**\n   * @method _convertToOldRole\n   * @param {Object} newRole `Meteor.roles` document.\n   * @return {Object} Converted `role` to the old format.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _convertToOldRole: function (newRole) {\n    if (!(typeof newRole._id === 'string')) { throw new Error(\"Role name '\" + newRole._id + \"' is not a string.\") }\n\n    return {\n      name: newRole._id\n    }\n  },\n\n  /**\n   * @method _convertToNewField\n   * @param {Array} oldRoles `Meteor.users` document `roles` field in the old format.\n   * @param {Boolean} convertUnderscoresToDots Should we convert underscores to dots in group names.\n   * @return {Array} Converted `roles` to the new format.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _convertToNewField: function (oldRoles, convertUnderscoresToDots) {\n    const roles = []\n    if (Array.isArray(oldRoles)) {\n      oldRoles.forEach(function (role, index) {\n        if (!(typeof role === 'string')) { throw new Error(\"Role '\" + role + \"' is not a string.\") }\n\n        roles.push({\n          _id: role,\n          scope: null,\n          assigned: true\n        })\n      })\n    } else if (typeof oldRoles === 'object') {\n      Object.entries(oldRoles).forEach(([group, rolesArray]) => {\n        if (group === '__global_roles__') {\n          group = null\n        } else if (convertUnderscoresToDots) {\n          // unescape\n          group = group.replace(/_/g, '.')\n        }\n\n        rolesArray.forEach(function (role) {\n          if (!(typeof role === 'string')) { throw new Error(\"Role '\" + role + \"' is not a string.\") }\n\n          roles.push({\n            _id: role,\n            scope: group,\n            assigned: true\n          })\n        })\n      })\n    }\n    return roles\n  },\n\n  /**\n   * @method _convertToOldField\n   * @param {Array} newRoles `Meteor.users` document `roles` field in the new format.\n   * @param {Boolean} usingGroups Should we use groups or not.\n   * @return {Array} Converted `roles` to the old format.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _convertToOldField: function (newRoles, usingGroups) {\n    let roles\n\n    if (usingGroups) {\n      roles = {}\n    } else {\n      roles = []\n    }\n\n    newRoles.forEach(function (userRole) {\n      if (!(typeof userRole === 'object')) { throw new Error(\"Role '\" + userRole + \"' is not an object.\") }\n\n      // We assume that we are converting back a failed migration, so values can only be\n      // what were valid values in 1.0. So no group names starting with $ and no subroles.\n\n      if (userRole.scope) {\n        if (!usingGroups) {\n          throw new Error(\n            \"Role '\" +\n              userRole._id +\n              \"' with scope '\" +\n              userRole.scope +\n              \"' without enabled groups.\"\n          )\n        }\n\n        // escape\n        const scope = userRole.scope.replace(/\\./g, '_')\n\n        if (scope[0] === '$') { throw new Error(\"Group name '\" + scope + \"' start with $.\") }\n\n        roles[scope] = roles[scope] || []\n        roles[scope].push(userRole._id)\n      } else {\n        if (usingGroups) {\n          roles.__global_roles__ = roles.__global_roles__ || []\n          roles.__global_roles__.push(userRole._id)\n        } else {\n          roles.push(userRole._id)\n        }\n      }\n    })\n    return roles\n  },\n\n  /**\n   * @method _defaultUpdateUser\n   * @param {Object} user `Meteor.users` document.\n   * @param {Array|Object} roles Value to which user's `roles` field should be set.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _defaultUpdateUser: function (user, roles) {\n    Meteor.users.update(\n      {\n        _id: user._id,\n        // making sure nothing changed in meantime\n        roles: user.roles\n      },\n      {\n        $set: { roles }\n      }\n    )\n  },\n\n  /**\n   * @method _defaultUpdateRole\n   * @param {Object} oldRole Old `Meteor.roles` document.\n   * @param {Object} newRole New `Meteor.roles` document.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _defaultUpdateRole: function (oldRole, newRole) {\n    Meteor.roles.remove(oldRole._id)\n    Meteor.roles.insert(newRole)\n  },\n\n  /**\n   * @method _dropCollectionIndex\n   * @param {Object} collection Collection on which to drop the index.\n   * @param {String} indexName Name of the index to drop.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _dropCollectionIndex: function (collection, indexName) {\n    try {\n      collection._dropIndex(indexName)\n    } catch (e) {\n      const indexNotFound = /index not found/.test(e.message || e.err || e.errmsg)\n\n      if (!indexNotFound) {\n        throw e\n      }\n    }\n  },\n\n  /**\n   * Migrates `Meteor.users` and `Meteor.roles` to the new format.\n   *\n   * @method _forwardMigrate\n   * @param {Function} updateUser Function which updates the user object. Default `_defaultUpdateUser`.\n   * @param {Function} updateRole Function which updates the role object. Default `_defaultUpdateRole`.\n   * @param {Boolean} convertUnderscoresToDots Should we convert underscores to dots in group names.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _forwardMigrate: function (updateUser, updateRole, convertUnderscoresToDots) {\n    updateUser = updateUser || Roles._defaultUpdateUser\n    updateRole = updateRole || Roles._defaultUpdateRole\n\n    Roles._dropCollectionIndex(Meteor.roles, 'name_1')\n\n    Meteor.roles.find().forEach(function (role, index, cursor) {\n      if (!Roles._isNewRole(role)) {\n        updateRole(role, Roles._convertToNewRole(role))\n      }\n    })\n\n    Meteor.users.find().forEach(function (user, index, cursor) {\n      if (!Roles._isNewField(user.roles)) {\n        updateUser(\n          user,\n          Roles._convertToNewField(user.roles, convertUnderscoresToDots)\n        )\n      }\n    })\n  },\n\n  /**\n   * Moves the assignments from `Meteor.users` to `Meteor.roleAssignment`.\n   *\n   * @method _forwardMigrate2\n   * @param {Object} userSelector An opportunity to share the work among instances. It's advisable to do the division based on user-id.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _forwardMigrate2: function (userSelector) {\n    userSelector = userSelector || {}\n    Object.assign(userSelector, { roles: { $ne: null } })\n\n    Meteor.users.find(userSelector).forEach(function (user, index) {\n      user.roles\n        .filter((r) => r.assigned)\n        .forEach((r) => {\n          // Added `ifExists` to make it less error-prone\n          Roles._addUserToRole(user._id, r._id, {\n            scope: r.scope,\n            ifExists: true\n          })\n        })\n\n      Meteor.users.update({ _id: user._id }, { $unset: { roles: '' } })\n    })\n\n    // No need to keep the indexes around\n    Roles._dropCollectionIndex(Meteor.users, 'roles._id_1_roles.scope_1')\n    Roles._dropCollectionIndex(Meteor.users, 'roles.scope_1')\n  },\n\n  /**\n   * Migrates `Meteor.users` and `Meteor.roles` to the old format.\n   *\n   * We assume that we are converting back a failed migration, so values can only be\n   * what were valid values in the old format. So no group names starting with `$` and\n   * no subroles.\n   *\n   * @method _backwardMigrate\n   * @param {Function} updateUser Function which updates the user object. Default `_defaultUpdateUser`.\n   * @param {Function} updateRole Function which updates the role object. Default `_defaultUpdateRole`.\n   * @param {Boolean} usingGroups Should we use groups or not.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _backwardMigrate: function (updateUser, updateRole, usingGroups) {\n    updateUser = updateUser || Roles._defaultUpdateUser\n    updateRole = updateRole || Roles._defaultUpdateRole\n\n    Roles._dropCollectionIndex(Meteor.users, 'roles._id_1_roles.scope_1')\n    Roles._dropCollectionIndex(Meteor.users, 'roles.scope_1')\n\n    Meteor.roles.find().forEach(function (role, index, cursor) {\n      if (!Roles._isOldRole(role)) {\n        updateRole(role, Roles._convertToOldRole(role))\n      }\n    })\n\n    Meteor.users.find().forEach(function (user, index, cursor) {\n      if (!Roles._isOldField(user.roles)) {\n        updateUser(user, Roles._convertToOldField(user.roles, usingGroups))\n      }\n    })\n  },\n\n  /**\n   * Moves the assignments from `Meteor.roleAssignment` back to to `Meteor.users`.\n   *\n   * @method _backwardMigrate2\n   * @param {Object} assignmentSelector An opportunity to share the work among instances. It's advisable to do the division based on user-id.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _backwardMigrate2: function (assignmentSelector) {\n    assignmentSelector = assignmentSelector || {}\n\n    if (Meteor.users.createIndex) {\n      Meteor.users.createIndex({ 'roles._id': 1, 'roles.scope': 1 })\n      Meteor.users.createIndex({ 'roles.scope': 1 })\n    } else {\n      Meteor.users._ensureIndex({ 'roles._id': 1, 'roles.scope': 1 })\n      Meteor.users._ensureIndex({ 'roles.scope': 1 })\n    }\n\n    Meteor.roleAssignment.find(assignmentSelector).forEach((r) => {\n      const roles = Meteor.users.findOne({ _id: r.user._id }).roles || []\n\n      const currentRole = roles.find(\n        (oldRole) => oldRole._id === r.role._id && oldRole.scope === r.scope\n      )\n      if (currentRole) {\n        currentRole.assigned = true\n      } else {\n        roles.push({\n          _id: r.role._id,\n          scope: r.scope,\n          assigned: true\n        })\n\n        r.inheritedRoles.forEach((inheritedRole) => {\n          const currentInheritedRole = roles.find(\n            (oldRole) =>\n              oldRole._id === inheritedRole._id && oldRole.scope === r.scope\n          )\n\n          if (!currentInheritedRole) {\n            roles.push({\n              _id: inheritedRole._id,\n              scope: r.scope,\n              assigned: false\n            })\n          }\n        })\n      }\n\n      Meteor.users.update({ _id: r.user._id }, { $set: { roles } })\n      Meteor.roleAssignment.remove({ _id: r._id })\n    })\n  }\n})\n"]}