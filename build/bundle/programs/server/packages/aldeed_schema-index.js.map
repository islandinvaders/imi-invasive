{"version":3,"sources":["meteor://ðŸ’»app/packages/aldeed:schema-index/server.js","meteor://ðŸ’»app/packages/aldeed:schema-index/common.js"],"names":["Collection2","module","link","default","v","Meteor","on","collection","ss","ensureIndex","index","name","unique","sparse","startup","_collection","createIndex","background","_ensureIndex","dropIndex","indexName","_dropIndex","err","propName","version","schema","Object","keys","forEach","fieldName","definition","indexValue","concat","idxFieldName","replace","optional","SimpleSchema","extendOptions","messageBox","messages","en","notUnique"],"mappings":"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","file":"/packages/aldeed_schema-index.js","sourcesContent":["import Collection2 from \"meteor/aldeed:collection2\";\nimport { Meteor } from \"meteor/meteor\";\n\nimport \"./common\";\n\nCollection2.on(\"schema.attached\", (collection, ss) => {\n  function ensureIndex(index, name, unique, sparse) {\n    Meteor.startup(() => {\n      if (collection._collection.createIndex) {\n        collection._collection.createIndex(index, {\n          background: true,\n          name,\n          unique,\n          sparse,\n        });\n      } else {\n        collection._collection._ensureIndex(index, {\n          background: true,\n          name,\n          unique,\n          sparse,\n        });\n      }\n    });\n  }\n\n  function dropIndex(indexName) {\n    Meteor.startup(() => {\n      try {\n        if (collection._collection.dropIndex) {\n          collection._collection.dropIndex(indexName);\n        } else {\n          collection._collection._dropIndex(indexName);\n        }\n      } catch (err) {\n        // no index with that name, which is what we want\n      }\n    });\n  }\n\n  const propName = ss.version === 2 ? \"mergedSchema\" : \"schema\";\n\n  // Loop over fields definitions and ensure collection indexes (server side only)\n  const schema = ss[propName]();\n  Object.keys(schema).forEach((fieldName) => {\n    const definition = schema[fieldName];\n    if (\"index\" in definition || definition.unique === true) {\n      const index = {};\n      // If they specified `unique: true` but not `index`,\n      // we assume `index: 1` to set up the unique index in mongo\n      let indexValue;\n      if (\"index\" in definition) {\n        indexValue = definition.index;\n        if (indexValue === true) indexValue = 1;\n      } else {\n        indexValue = 1;\n      }\n\n      const indexName = `c2_${fieldName}`;\n      // In the index object, we want object array keys without the \".$\" piece\n      const idxFieldName = fieldName.replace(/\\.\\$\\./g, \".\");\n      index[idxFieldName] = indexValue;\n      const unique =\n        !!definition.unique && (indexValue === 1 || indexValue === -1);\n      let sparse = definition.sparse || false;\n\n      // If unique and optional, force sparse to prevent errors\n      if (!sparse && unique && definition.optional) sparse = true;\n\n      if (indexValue === false) {\n        dropIndex(indexName);\n      } else {\n        ensureIndex(index, indexName, unique, sparse);\n      }\n    }\n  });\n});\n","// collection2 checks to make sure that simpl-schema package is added\nimport SimpleSchema from \"simpl-schema\";\nimport Collection2 from \"meteor/aldeed:collection2\";\n\n// Extend the schema options allowed by SimpleSchema\nSimpleSchema.extendOptions([\n  \"index\", // one of Number, String, Boolean\n  \"unique\", // Boolean\n  \"sparse\", // Boolean\n]);\n\nCollection2.on(\"schema.attached\", (collection, ss) => {\n  // Define validation error messages\n  if (\n    ss.version >= 2 &&\n    ss.messageBox &&\n    typeof ss.messageBox.messages === \"function\"\n  ) {\n    ss.messageBox.messages({\n      en: {\n        notUnique: \"{{label}} must be unique\",\n      },\n    });\n  }\n});\n"]}