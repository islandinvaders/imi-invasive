{"version":3,"sources":["meteor://ðŸ’»app/packages/tmeasday:check-npm-versions/check-npm-versions.ts"],"names":["module1","export","checkNpmVersions","Meteor","link","v","semver","default","compatibleVersionIsInstalled","name","range","installedVersion","require","concat","version","satisfies","e","message","toString","includes","packages","packageName","isDevelopment","failures","Object","keys","forEach","failure","length","errors","installed","requirement","push","qualifier","console","warn","join","call","module"],"mappings":";;;;;;;;;;;;;;;;;;EAAAA,OAAO,CAAAC,MAAE,CAAM;IAAAC,gBAAQ,EAAAA,CAAA,KAAAA;EAAgB;EAAA,IAAAC,MAAA;EAAAH,OAAA,CAAAI,IAAA;IAAAD,OAAAE,CAAA;MAAAF,MAAA,GAAAE,CAAA;IAAA;EAAA;EAAA,IAAAC,MAAA;EAAAN,OAAA,CAAAI,IAAA;IAAAG,QAAAF,CAAA;MAAAC,MAAA,GAAAD,CAAA;IAAA;EAAA;EAavC;EACA;EACA;EACA;EACA,MAAMG,4BAA4B,GAAGA,CAACC,IAAY,EAAEC,KAA4B,KAAkB;IAChG,IAAI;MACF,MAAMC,gBAAgB,GAAGC,OAAO,IAAAC,MAAA,CAAIJ,IAAI,kBAAe,CAAC,CAACK,OAAO;MAChE,IAAIR,MAAM,CAACS,SAAS,CAACJ,gBAAgB,EAAED,KAAK,CAAC,EAAE;QAC7C,OAAO,IAAI;OACZ,MAAM;QACL,OAAOC,gBAAgB;;KAE1B,CAAC,OAAOK,CAAC,EAAE;MACV;MACA,MAAMC,OAAO,GAAGD,CAAC,CAACE,QAAQ,EAAE;MAC5B;MACA,IAAID,OAAO,CAACE,QAAQ,CAAC,oBAAoB,CAAC,KAAK,IAAI,IAAIF,OAAO,CAACE,QAAQ,CAAC,uBAAuB,CAAC,KAAK,IAAI,EAAE;QACzG,OAAO,KAAK;OACb,MAAM;QACL,MAAMH,CAAC;;;EAGb,CAAC;EAEM,MAAMd,gBAAgB,GAAGA,CAACkB,QAAkB,EAAEC,WAAmB,KAAU;IAChF,IAAIlB,MAAM,CAACmB,aAAa,EAAE;MACxB,MAAMC,QAAQ,GAAsB,EAAE;MAEtCC,MAAM,CAACC,IAAI,CAACL,QAAQ,CAAC,CAACM,OAAO,CAAEjB,IAAI,IAAI;QACrC,MAAMC,KAAK,GAAGU,QAAQ,CAACX,IAAI,CAAC;QAC5B,MAAMkB,OAAO,GAAGnB,4BAA4B,CAACC,IAAI,EAAEC,KAAK,CAAC;QAEzD,IAAIiB,OAAO,KAAK,IAAI,EAAE;UACpBJ,QAAQ,CAACd,IAAI,CAAC,GAAGkB,OAAO;;MAE5B,CAAC,CAAC;MAEF,IAAIH,MAAM,CAACC,IAAI,CAACF,QAAQ,CAAC,CAACK,MAAM,KAAK,CAAC,EAAE;QACtC;;MAGF,MAAMC,MAAM,GAAa,EAAE;MAE3BL,MAAM,CAACC,IAAI,CAACF,QAAQ,CAAC,CAACG,OAAO,CAAEjB,IAAI,IAAI;QACrC,MAAMqB,SAAS,GAAGP,QAAQ,CAACd,IAAI,CAAC;QAChC,MAAMsB,WAAW,MAAAlB,MAAA,CAAMJ,IAAI,OAAAI,MAAA,CAAIO,QAAQ,CAACX,IAAI,CAAC,CAAE;QAE/C,IAAIqB,SAAS,EAAE;UACbD,MAAM,CAACG,IAAI,OAAAnB,MAAA,CAAOJ,IAAI,OAAAI,MAAA,CAAIiB,SAAS,kBAAAjB,MAAA,CAAekB,WAAW,YAAS,CAAC;SACxE,MAAM;UACLF,MAAM,CAACG,IAAI,OAAAnB,MAAA,CAAOJ,IAAI,OAAAI,MAAA,CAAIO,QAAQ,CAACX,IAAI,CAAC,oBAAiB,CAAC;;MAE9D,CAAC,CAAC;MAEF,MAAMwB,SAAS,GAAGZ,WAAW,WAAAR,MAAA,CAAWQ,WAAW,UAAO,EAAE;MAC5Da,OAAO,CAACC,IAAI,mCAAAtB,MAAA,CAAmCoB,SAAS,wBAAApB,MAAA,CACxDgB,MAAM,CAACO,IAAI,CAAC,IAAI,CAAC,uIAIlB,CAAC;;EAEJ,CAAC;AAAC,EAAAC,IAAA,OAAAC,MAAA,E","file":"/packages/tmeasday_check-npm-versions.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport semver from 'semver';\n\ntype boolOrString = boolean | string;\n\ninterface indexBoolorString {\n  [key: string]: boolOrString\n}\n\ninterface indexAny {\n  [key: string]: any\n}\n\n// Returns:\n//   - true      if a version of the package in the range is installed\n//   - false     if no version is installed\n//   - version#  if incompatible version is installed\nconst compatibleVersionIsInstalled = (name: string, range: string | semver.Range): boolOrString => {\n  try {\n    const installedVersion = require(`${name}/package.json`).version;\n    if (semver.satisfies(installedVersion, range)) {\n      return true;\n    } else {\n      return installedVersion;\n    }\n  } catch (e) {\n    // XXX add something to the tool to make this more reliable\n    const message = e.toString();\n    // One message comes out of the install npm package the other from npm directly\n    if (message.includes('Cannot find module') === true || message.includes(\"Can't find npm module\") === true) {\n      return false;\n    } else {\n      throw e;\n    }\n  }\n};\n\nexport const checkNpmVersions = (packages: indexAny, packageName: string): void => {\n  if (Meteor.isDevelopment) {\n    const failures: indexBoolorString = {};\n\n    Object.keys(packages).forEach((name) => {\n      const range = packages[name];\n      const failure = compatibleVersionIsInstalled(name, range);\n\n      if (failure !== true) {\n        failures[name] = failure;\n      }\n    });\n\n    if (Object.keys(failures).length === 0) {\n      return;\n    }\n\n    const errors: string[] = [];\n\n    Object.keys(failures).forEach((name) => {\n      const installed = failures[name];\n      const requirement = `${name}@${packages[name]}`;\n\n      if (installed) {\n        errors.push(` - ${name}@${installed} installed, ${requirement} needed`);\n      } else {\n        errors.push(` - ${name}@${packages[name]} not installed.`);\n      }\n    });\n\n    const qualifier = packageName ? `(for ${packageName}) ` : '';\n    console.warn(`WARNING: npm peer requirements ${qualifier}not installed:\n  ${errors.join('\\n')}\n\n  Read more about installing npm peer dependencies:\n    http://guide.meteor.com/using-packages.html#peer-npm-dependencies\n  `);\n  }\n};\n"]}